
SIM800C_STM32F401RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003854  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080039f4  080039f4  000049f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b38  08003b38  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b38  08003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b40  08003b40  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000005c  08003ba4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08003ba4  00005348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f2c  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6f  00000000  00000000  0000dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000fa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a0  00000000  00000000  00010198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a4f  00000000  00000000  00010738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e24  00000000  00000000  00026187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085476  00000000  00000000  0002ffab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002224  00000000  00000000  000b5464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  000b7688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080039dc 	.word	0x080039dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080039dc 	.word	0x080039dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_UART_RxCpltCallback>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <HAL_UART_RxCpltCallback+0x20>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d102      	bne.n	80005d4 <HAL_UART_RxCpltCallback+0x18>
        SIM800C_RxCpltCallback(&sim800c);
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <HAL_UART_RxCpltCallback+0x24>)
 80005d0:	f000 fb40 	bl	8000c54 <SIM800C_RxCpltCallback>
    }
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40011000 	.word	0x40011000
 80005e0:	20000108 	.word	0x20000108

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fca8 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f816 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f8d2 	bl	8000798 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f87c 	bl	80006f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 f8a4 	bl	8000744 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SIM800C_Init(&sim800c, &huart1, &huart2);
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <main+0x2c>)
 80005fe:	4905      	ldr	r1, [pc, #20]	@ (8000614 <main+0x30>)
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <main+0x34>)
 8000602:	f000 fad5 	bl	8000bb0 <SIM800C_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      SIM800C_Loop(&sim800c, 1);
 8000606:	2101      	movs	r1, #1
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <main+0x34>)
 800060a:	f000 fb61 	bl	8000cd0 <SIM800C_Loop>
 800060e:	e7fa      	b.n	8000606 <main+0x22>
 8000610:	200000c0 	.word	0x200000c0
 8000614:	20000078 	.word	0x20000078
 8000618:	20000108 	.word	0x20000108

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	@ 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fd42 	bl	80030b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	@ (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000668:	4a20      	ldr	r2, [pc, #128]	@ (80006ec <SystemClock_Config+0xd0>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000690:	2319      	movs	r3, #25
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000694:	23a8      	movs	r3, #168	@ 0xa8
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 f821 	bl	80016ec <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b0:	f000 f8c4 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fa83 	bl	8001bdc <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006dc:	f000 f8ae 	bl	800083c <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	@ 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_USART1_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <MX_USART1_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_USART1_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_USART1_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_USART1_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_USART1_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_USART1_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_USART1_UART_Init+0x4c>)
 8000728:	f001 fc38 	bl	8001f9c <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f883 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000078 	.word	0x20000078
 8000740:	40011000 	.word	0x40011000

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <MX_USART2_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800077c:	f001 fc0e 	bl	8001f9c <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f859 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000c0 	.word	0x200000c0
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a18      	ldr	r2, [pc, #96]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a11      	ldr	r2, [pc, #68]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_GPIO_Init+0x9c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000808:	480b      	ldr	r0, [pc, #44]	@ (8000838 <MX_GPIO_Init+0xa0>)
 800080a:	f000 ff55 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000818:	2302      	movs	r3, #2
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_GPIO_Init+0xa0>)
 8000828:	f000 fdc2 	bl	80013b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020800 	.word	0x40020800

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <Error_Handler+0x8>

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	@ (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085c:	6453      	str	r3, [r2, #68]	@ 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	@ (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	@ 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a36      	ldr	r2, [pc, #216]	@ (8000990 <HAL_UART_MspInit+0xf8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d135      	bne.n	8000926 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	4b35      	ldr	r3, [pc, #212]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	4a34      	ldr	r2, [pc, #208]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ca:	4b32      	ldr	r3, [pc, #200]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	f003 0310 	and.w	r3, r3, #16
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	4b2e      	ldr	r3, [pc, #184]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2d      	ldr	r2, [pc, #180]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000904:	2307      	movs	r3, #7
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4822      	ldr	r0, [pc, #136]	@ (8000998 <HAL_UART_MspInit+0x100>)
 8000910:	f000 fd4e 	bl	80013b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2025      	movs	r0, #37	@ 0x25
 800091a:	f000 fc80 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800091e:	2025      	movs	r0, #37	@ 0x25
 8000920:	f000 fc99 	bl	8001256 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000924:	e030      	b.n	8000988 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <HAL_UART_MspInit+0x104>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d12b      	bne.n	8000988 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 800093a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800093e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000954:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6313      	str	r3, [r2, #48]	@ 0x30
 800095c:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <HAL_UART_MspInit+0xfc>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000968:	230c      	movs	r3, #12
 800096a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000978:	2307      	movs	r3, #7
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <HAL_UART_MspInit+0x100>)
 8000984:	f000 fd14 	bl	80013b0 <HAL_GPIO_Init>
}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40011000 	.word	0x40011000
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000
 800099c:	40004400 	.word	0x40004400

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <MemManage_Handler+0x4>

080009b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 faf3 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <USART1_IRQHandler+0x10>)
 8000a06:	f001 fbc9 	bl	800219c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000078 	.word	0x20000078

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f002 fb54 	bl	80030f0 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20010000 	.word	0x20010000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	200001f8 	.word	0x200001f8
 8000a7c:	20000348 	.word	0x20000348

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000adc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8000af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f002 fb13 	bl	80030fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fd85 	bl	80005e4 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000adc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ae8:	08003b48 	.word	0x08003b48
  ldr r2, =_sbss
 8000aec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000af0:	20000348 	.word	0x20000348

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <SIM800C_SendATCommand>:
#include <stdio.h>



static void SIM800C_SendATCommand(SIM800C_Handle *hSim, const char *cmd)
{
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    snprintf(hSim->txBuffer, hSim->txBufferSize, "%s\r\n", cmd);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f103 0064 	add.w	r0, r3, #100	@ 0x64
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8000b0e:	4619      	mov	r1, r3
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <SIM800C_SendATCommand+0x54>)
 8000b14:	f002 fa98 	bl	8003048 <sniprintf>
    hSim->UartTransmit(hSim->sim800cUart, (uint8_t *)hSim->txBuffer, strlen(hSim->txBuffer), 1000);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	@ 0xe0
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f8d3 50d8 	ldr.w	r5, [r3, #216]	@ 0xd8
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f103 0664 	add.w	r6, r3, #100	@ 0x64
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3364      	adds	r3, #100	@ 0x64
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fb56 	bl	80001e0 <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	4628      	mov	r0, r5
 8000b40:	47a0      	blx	r4
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	080039f4 	.word	0x080039f4

08000b50 <SIM800C_DebugPrint>:



static void SIM800C_DebugPrint(SIM800C_Handle *hSim, const char *msg)
{
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	hSim->UartTransmit(hSim->debugUart, (uint8_t *)msg, strlen(msg), 1000);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f8d3 40e0 	ldr.w	r4, [r3, #224]	@ 0xe0
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f8d3 50dc 	ldr.w	r5, [r3, #220]	@ 0xdc
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	f7ff fb3a 	bl	80001e0 <strlen>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b74:	6839      	ldr	r1, [r7, #0]
 8000b76:	4628      	mov	r0, r5
 8000b78:	47a0      	blx	r4
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bdb0      	pop	{r4, r5, r7, pc}

08000b82 <SIM800C_RxBuff_Clear>:


static void SIM800C_RxBuff_Clear(SIM800C_Handle *hSim)
{
 8000b82:	b590      	push	{r4, r7, lr}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
    memset(hSim->rxBuffer, 0, strlen(hSim->rxBuffer));
 8000b8a:	687c      	ldr	r4, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fb26 	bl	80001e0 <strlen>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f002 fa8a 	bl	80030b4 <memset>
    hSim->rxIndex = 0;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd90      	pop	{r4, r7, pc}

08000bb0 <SIM800C_Init>:


void SIM800C_Init(SIM800C_Handle *hSim, void *sim800cUart, void *debugUart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	hSim->sim800cUart     = sim800cUart;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	hSim->debugUart       = debugUart;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	hSim->UartTransmit    = SIM800C_UART_Transmit_Adapter;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4a1d      	ldr	r2, [pc, #116]	@ (8000c44 <SIM800C_Init+0x94>)
 8000bd0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	hSim->UartReceive_IT  = SIM800C_UART_Receive_IT_Adapter;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <SIM800C_Init+0x98>)
 8000bd8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	hSim->GetTick         = SIM800C_GetTick_Adapter;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <SIM800C_Init+0x9c>)
 8000be0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	hSim->DelayMs         = SIM800C_Delay_Adapter;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c50 <SIM800C_Init+0xa0>)
 8000be8:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    hSim->rxBufferSize    = SIM800_RX_BUFFER_SIZE;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2264      	movs	r2, #100	@ 0x64
 8000bf0:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
    hSim->txBufferSize    = SIM800_TX_BUFFER_SIZE;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2264      	movs	r2, #100	@ 0x64
 8000bf8:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca

    hSim->rxIndex = 0;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
    hSim->responseReady   = false;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
    hSim->commandState    = CMD_START;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    hSim->lastCommandTime = hSim->GetTick();
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c1a:	4798      	blx	r3
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    hSim->UartReceive_IT(hSim->sim800cUart, &hSim->rxChar, 1);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	f8d2 00d8 	ldr.w	r0, [r2, #216]	@ 0xd8
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	f102 01cc 	add.w	r1, r2, #204	@ 0xcc
 8000c36:	2201      	movs	r2, #1
 8000c38:	4798      	blx	r3
}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	08000ecd 	.word	0x08000ecd
 8000c48:	08000ef3 	.word	0x08000ef3
 8000c4c:	08000f17 	.word	0x08000f17
 8000c50:	08000f25 	.word	0x08000f25

08000c54 <SIM800C_RxCpltCallback>:


void SIM800C_RxCpltCallback(SIM800C_Handle *hSim)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    if (hSim->rxIndex < sizeof(hSim->rxBuffer) - 1) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000c62:	2b62      	cmp	r3, #98	@ 0x62
 8000c64:	d81e      	bhi.n	8000ca4 <SIM800C_RxCpltCallback+0x50>

        hSim->rxBuffer[hSim->rxIndex++] = hSim->rxChar;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	b2d1      	uxtb	r1, r2
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	f882 10cd 	strb.w	r1, [r2, #205]	@ 0xcd
 8000c76:	461a      	mov	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 10cc 	ldrb.w	r1, [r3, #204]	@ 0xcc
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	5499      	strb	r1, [r3, r2]

        if (hSim->rxChar == '\n') {
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8000c88:	2b0a      	cmp	r3, #10
 8000c8a:	d10f      	bne.n	8000cac <SIM800C_RxCpltCallback+0x58>

            hSim->rxBuffer[hSim->rxIndex] = '\0';
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2100      	movs	r1, #0
 8000c98:	5499      	strb	r1, [r3, r2]
            hSim->responseReady = true;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
 8000ca2:	e003      	b.n	8000cac <SIM800C_RxCpltCallback+0x58>
        }

    }
    else {
        SIM800C_DebugPrint(hSim, "RX Buffer Overflow!\r\n");
 8000ca4:	4909      	ldr	r1, [pc, #36]	@ (8000ccc <SIM800C_RxCpltCallback+0x78>)
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ff52 	bl	8000b50 <SIM800C_DebugPrint>
    }

    hSim->UartReceive_IT(hSim->sim800cUart, &hSim->rxChar, 1);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	f8d2 00d8 	ldr.w	r0, [r2, #216]	@ 0xd8
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	f102 01cc 	add.w	r1, r2, #204	@ 0xcc
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4798      	blx	r3

}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	080039fc 	.word	0x080039fc

08000cd0 <SIM800C_Loop>:



void SIM800C_Loop(SIM800C_Handle *hSim, uint32_t sampleTime)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]

    if ((hSim->GetTick() - hSim->lastCommandTime) > sampleTime) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ce0:	4798      	blx	r3
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d22f      	bcs.n	8000d52 <SIM800C_Loop+0x82>

        switch (hSim->commandState) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d821      	bhi.n	8000d40 <SIM800C_Loop+0x70>
 8000cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8000d04 <SIM800C_Loop+0x34>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d19 	.word	0x08000d19
 8000d08:	08000d23 	.word	0x08000d23
 8000d0c:	08000d2d 	.word	0x08000d2d
 8000d10:	08000d37 	.word	0x08000d37
 8000d14:	08000d41 	.word	0x08000d41

			case CMD_START:
				SIM800C_SendATCommand(hSim, "AT");
 8000d18:	495e      	ldr	r1, [pc, #376]	@ (8000e94 <SIM800C_Loop+0x1c4>)
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff feec 	bl	8000af8 <SIM800C_SendATCommand>
				break;
 8000d20:	e00f      	b.n	8000d42 <SIM800C_Loop+0x72>

			case CMD_EKO_0:
				SIM800C_SendATCommand(hSim, "ATE0");
 8000d22:	495d      	ldr	r1, [pc, #372]	@ (8000e98 <SIM800C_Loop+0x1c8>)
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fee7 	bl	8000af8 <SIM800C_SendATCommand>
				break;
 8000d2a:	e00a      	b.n	8000d42 <SIM800C_Loop+0x72>

            case CMD_CMEE:
                SIM800C_SendATCommand(hSim, "AT+CMEE=2");
 8000d2c:	495b      	ldr	r1, [pc, #364]	@ (8000e9c <SIM800C_Loop+0x1cc>)
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fee2 	bl	8000af8 <SIM800C_SendATCommand>
                break;
 8000d34:	e005      	b.n	8000d42 <SIM800C_Loop+0x72>

            case CMD_CPIN:
                SIM800C_SendATCommand(hSim, "AT+CPIN?");
 8000d36:	495a      	ldr	r1, [pc, #360]	@ (8000ea0 <SIM800C_Loop+0x1d0>)
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fedd 	bl	8000af8 <SIM800C_SendATCommand>
                break;
 8000d3e:	e000      	b.n	8000d42 <SIM800C_Loop+0x72>

                break;


            default:
                break;
 8000d40:	bf00      	nop
        }
        hSim->lastCommandTime =  hSim->GetTick();
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d48:	4798      	blx	r3
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    }


	if (hSim->responseReady) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 8097 	beq.w	8000e8c <SIM800C_Loop+0x1bc>

		hSim->responseReady = false;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce

		if (strstr(hSim->rxBuffer, "OK")){
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	494e      	ldr	r1, [pc, #312]	@ (8000ea4 <SIM800C_Loop+0x1d4>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 f9aa 	bl	80030c4 <strstr>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d034      	beq.n	8000de0 <SIM800C_Loop+0x110>

			switch (hSim->commandState){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d87f      	bhi.n	8000e80 <SIM800C_Loop+0x1b0>
 8000d80:	a201      	add	r2, pc, #4	@ (adr r2, 8000d88 <SIM800C_Loop+0xb8>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000d99 	.word	0x08000d99
 8000d8c:	08000dab 	.word	0x08000dab
 8000d90:	08000dbd 	.word	0x08000dbd
 8000d94:	08000dcf 	.word	0x08000dcf

			   case CMD_START:
				  SIM800C_DebugPrint(hSim, "SIM800C is Started!\r\n");
 8000d98:	4943      	ldr	r1, [pc, #268]	@ (8000ea8 <SIM800C_Loop+0x1d8>)
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fed8 	bl	8000b50 <SIM800C_DebugPrint>
			      hSim->commandState = CMD_EKO_0;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			   break;
 8000da8:	e06d      	b.n	8000e86 <SIM800C_Loop+0x1b6>

			   case CMD_EKO_0:
				  SIM800C_DebugPrint(hSim, "EKO Mode Off!\r\n");
 8000daa:	4940      	ldr	r1, [pc, #256]	@ (8000eac <SIM800C_Loop+0x1dc>)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fecf 	bl	8000b50 <SIM800C_DebugPrint>
				  hSim->commandState = CMD_CMEE;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2202      	movs	r2, #2
 8000db6:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			   break;
 8000dba:	e064      	b.n	8000e86 <SIM800C_Loop+0x1b6>

			   case CMD_CMEE:
				   SIM800C_DebugPrint(hSim, "CMEE Mode On!\r\n");
 8000dbc:	493c      	ldr	r1, [pc, #240]	@ (8000eb0 <SIM800C_Loop+0x1e0>)
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fec6 	bl	8000b50 <SIM800C_DebugPrint>
				   hSim->commandState = CMD_CPIN;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			   break;
 8000dcc:	e05b      	b.n	8000e86 <SIM800C_Loop+0x1b6>

			   case CMD_CPIN:
				   SIM800C_DebugPrint(hSim, "Sim Card is OK!\r\n");
 8000dce:	4939      	ldr	r1, [pc, #228]	@ (8000eb4 <SIM800C_Loop+0x1e4>)
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff febd 	bl	8000b50 <SIM800C_DebugPrint>
				   hSim->commandState = CMD_COMPLATED;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2204      	movs	r2, #4
 8000dda:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			   break;
 8000dde:	e052      	b.n	8000e86 <SIM800C_Loop+0x1b6>
			   default:
			   break;
			}

		}
		else if (strstr(hSim->rxBuffer, "ERROR")){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4935      	ldr	r1, [pc, #212]	@ (8000eb8 <SIM800C_Loop+0x1e8>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 f96d 	bl	80030c4 <strstr>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d04a      	beq.n	8000e86 <SIM800C_Loop+0x1b6>

		   switch (hSim->commandState){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d844      	bhi.n	8000e84 <SIM800C_Loop+0x1b4>
 8000dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000e00 <SIM800C_Loop+0x130>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e11 	.word	0x08000e11
 8000e04:	08000e2d 	.word	0x08000e2d
 8000e08:	08000e49 	.word	0x08000e49
 8000e0c:	08000e65 	.word	0x08000e65

			   case CMD_START:
				  SIM800C_DebugPrint(hSim, "SIM800C is Fault! : ");
 8000e10:	492a      	ldr	r1, [pc, #168]	@ (8000ebc <SIM800C_Loop+0x1ec>)
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fe9c 	bl	8000b50 <SIM800C_DebugPrint>
				  SIM800C_DebugPrint(hSim, hSim->rxBuffer);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fe97 	bl	8000b50 <SIM800C_DebugPrint>
				   hSim->commandState = CMD_ERROR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2206      	movs	r2, #6
 8000e26:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			   break;
 8000e2a:	e02c      	b.n	8000e86 <SIM800C_Loop+0x1b6>

			   case CMD_EKO_0:
				   SIM800C_DebugPrint(hSim, "EKO_0 Mode is Fault! : ");
 8000e2c:	4924      	ldr	r1, [pc, #144]	@ (8000ec0 <SIM800C_Loop+0x1f0>)
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fe8e 	bl	8000b50 <SIM800C_DebugPrint>
				   SIM800C_DebugPrint(hSim, hSim->rxBuffer);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4619      	mov	r1, r3
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fe89 	bl	8000b50 <SIM800C_DebugPrint>
				   hSim->commandState = CMD_ERROR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2206      	movs	r2, #6
 8000e42:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			   break;
 8000e46:	e01e      	b.n	8000e86 <SIM800C_Loop+0x1b6>

			   case CMD_CMEE:
				   SIM800C_DebugPrint(hSim, "CMEE Mode is Fault! : ");
 8000e48:	491e      	ldr	r1, [pc, #120]	@ (8000ec4 <SIM800C_Loop+0x1f4>)
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fe80 	bl	8000b50 <SIM800C_DebugPrint>
				   SIM800C_DebugPrint(hSim, hSim->rxBuffer);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4619      	mov	r1, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff fe7b 	bl	8000b50 <SIM800C_DebugPrint>
				   hSim->commandState = CMD_ERROR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2206      	movs	r2, #6
 8000e5e:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			   break;
 8000e62:	e010      	b.n	8000e86 <SIM800C_Loop+0x1b6>

			   case CMD_CPIN:
				   SIM800C_DebugPrint(hSim, "CPIN is Fault! : ");
 8000e64:	4918      	ldr	r1, [pc, #96]	@ (8000ec8 <SIM800C_Loop+0x1f8>)
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fe72 	bl	8000b50 <SIM800C_DebugPrint>
				   SIM800C_DebugPrint(hSim, hSim->rxBuffer);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fe6d 	bl	8000b50 <SIM800C_DebugPrint>
				   hSim->commandState = CMD_ERROR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2206      	movs	r2, #6
 8000e7a:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			   break;
 8000e7e:	e002      	b.n	8000e86 <SIM800C_Loop+0x1b6>
			   break;
 8000e80:	bf00      	nop
 8000e82:	e000      	b.n	8000e86 <SIM800C_Loop+0x1b6>

			   default:
			   break;
 8000e84:	bf00      	nop
		   }

		}

       SIM800C_RxBuff_Clear(hSim);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fe7b 	bl	8000b82 <SIM800C_RxBuff_Clear>
    }

}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	08003a14 	.word	0x08003a14
 8000e98:	08003a18 	.word	0x08003a18
 8000e9c:	08003a20 	.word	0x08003a20
 8000ea0:	08003a2c 	.word	0x08003a2c
 8000ea4:	08003a38 	.word	0x08003a38
 8000ea8:	08003a3c 	.word	0x08003a3c
 8000eac:	08003a54 	.word	0x08003a54
 8000eb0:	08003a64 	.word	0x08003a64
 8000eb4:	08003a74 	.word	0x08003a74
 8000eb8:	08003a88 	.word	0x08003a88
 8000ebc:	08003a90 	.word	0x08003a90
 8000ec0:	08003aa8 	.word	0x08003aa8
 8000ec4:	08003ac0 	.word	0x08003ac0
 8000ec8:	08003ad8 	.word	0x08003ad8

08000ecc <SIM800C_UART_Transmit_Adapter>:
#define MICROCONTROLLER 1




int SIM800C_UART_Transmit_Adapter(void *huart, const uint8_t *data, uint16_t size, uint32_t timeout){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	80fb      	strh	r3, [r7, #6]

#if (MICROCONTROLLER == 1)
    return HAL_UART_Transmit((UART_HandleTypeDef *)huart, (uint8_t *)data, size, timeout);
 8000edc:	88fa      	ldrh	r2, [r7, #6]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f001 f8aa 	bl	800203c <HAL_UART_Transmit>
 8000ee8:	4603      	mov	r3, r0

#if (MICROCONTROLLER == 2)
    return 0;
#endif

}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <SIM800C_UART_Receive_IT_Adapter>:

int SIM800C_UART_Receive_IT_Adapter(void *huart, uint8_t *data, uint16_t size){
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	4613      	mov	r3, r2
 8000efe:	80fb      	strh	r3, [r7, #6]

#if (MICROCONTROLLER == 1)
    return HAL_UART_Receive_IT((UART_HandleTypeDef *)huart, data, size);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f001 f923 	bl	8002152 <HAL_UART_Receive_IT>
 8000f0c:	4603      	mov	r3, r0
#endif

#if (MICROCONTROLLER == 2)
    return 0;
#endif
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <SIM800C_GetTick_Adapter>:

uint32_t SIM800C_GetTick_Adapter(void){
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0

#if (MICROCONTROLLER == 1)
    return HAL_GetTick();
 8000f1a:	f000 f875 	bl	8001008 <HAL_GetTick>
 8000f1e:	4603      	mov	r3, r0

#if (MICROCONTROLLER == 2)
    return 0;
#endif

}
 8000f20:	4618      	mov	r0, r3
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <SIM800C_Delay_Adapter>:

void SIM800C_Delay_Adapter(uint32_t ms){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

#if (MICROCONTROLLER == 1)
    HAL_Delay(ms);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f877 	bl	8001020 <HAL_Delay>

#if (MICROCONTROLLER == 2)
    return 0;
#endif

}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f40:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <HAL_Init+0x40>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <HAL_Init+0x40>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	@ (8000f7c <HAL_Init+0x40>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f94f 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fc6a 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023c00 	.word	0x40023c00

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f967 	bl	8001272 <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f92f 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	@ (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	200001fc 	.word	0x200001fc

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200001fc 	.word	0x200001fc

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	@ (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	@ (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff29 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff3e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff31 	bl	80010cc <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001296:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff feb6 	bl	8001008 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d008      	beq.n	80012bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2280      	movs	r2, #128	@ 0x80
 80012ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e052      	b.n	8001362 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0216 	bic.w	r2, r2, #22
 80012ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d103      	bne.n	80012ec <HAL_DMA_Abort+0x62>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0208 	bic.w	r2, r2, #8
 80012fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130c:	e013      	b.n	8001336 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800130e:	f7ff fe7b 	bl	8001008 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b05      	cmp	r3, #5
 800131a:	d90c      	bls.n	8001336 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2220      	movs	r2, #32
 8001320:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2203      	movs	r2, #3
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e015      	b.n	8001362 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e4      	bne.n	800130e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001348:	223f      	movs	r2, #63	@ 0x3f
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d004      	beq.n	8001388 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2280      	movs	r2, #128	@ 0x80
 8001382:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e00c      	b.n	80013a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2205      	movs	r2, #5
 800138c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	e159      	b.n	8001680 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	f040 8148 	bne.w	800167a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d005      	beq.n	8001402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d130      	bne.n	8001464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	f003 0201 	and.w	r2, r3, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b03      	cmp	r3, #3
 800146e:	d017      	beq.n	80014a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d123      	bne.n	80014f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	220f      	movs	r2, #15
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	08da      	lsrs	r2, r3, #3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3208      	adds	r2, #8
 80014ee:	69b9      	ldr	r1, [r7, #24]
 80014f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0203 	and.w	r2, r3, #3
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80a2 	beq.w	800167a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b57      	ldr	r3, [pc, #348]	@ (8001698 <HAL_GPIO_Init+0x2e8>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	4a56      	ldr	r2, [pc, #344]	@ (8001698 <HAL_GPIO_Init+0x2e8>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001544:	6453      	str	r3, [r2, #68]	@ 0x44
 8001546:	4b54      	ldr	r3, [pc, #336]	@ (8001698 <HAL_GPIO_Init+0x2e8>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001552:	4a52      	ldr	r2, [pc, #328]	@ (800169c <HAL_GPIO_Init+0x2ec>)
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	3302      	adds	r3, #2
 800155a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a49      	ldr	r2, [pc, #292]	@ (80016a0 <HAL_GPIO_Init+0x2f0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x202>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a48      	ldr	r2, [pc, #288]	@ (80016a4 <HAL_GPIO_Init+0x2f4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x1fe>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a47      	ldr	r2, [pc, #284]	@ (80016a8 <HAL_GPIO_Init+0x2f8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x1fa>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a46      	ldr	r2, [pc, #280]	@ (80016ac <HAL_GPIO_Init+0x2fc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x1f6>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a45      	ldr	r2, [pc, #276]	@ (80016b0 <HAL_GPIO_Init+0x300>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x1f2>
 800159e:	2304      	movs	r3, #4
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x204>
 80015a2:	2307      	movs	r3, #7
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x204>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x204>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x204>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x204>
 80015b2:	2300      	movs	r3, #0
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	@ (800169c <HAL_GPIO_Init+0x2ec>)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <HAL_GPIO_Init+0x304>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a2f      	ldr	r2, [pc, #188]	@ (80016b4 <HAL_GPIO_Init+0x304>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <HAL_GPIO_Init+0x304>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a24      	ldr	r2, [pc, #144]	@ (80016b4 <HAL_GPIO_Init+0x304>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001626:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <HAL_GPIO_Init+0x304>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164a:	4a1a      	ldr	r2, [pc, #104]	@ (80016b4 <HAL_GPIO_Init+0x304>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <HAL_GPIO_Init+0x304>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001674:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <HAL_GPIO_Init+0x304>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3301      	adds	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f67f aea2 	bls.w	80013cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3724      	adds	r7, #36	@ 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40013c00 	.word	0x40013c00

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e267      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d075      	beq.n	80017f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800170a:	4b88      	ldr	r3, [pc, #544]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b04      	cmp	r3, #4
 8001714:	d00c      	beq.n	8001730 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001716:	4b85      	ldr	r3, [pc, #532]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800171e:	2b08      	cmp	r3, #8
 8001720:	d112      	bne.n	8001748 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001722:	4b82      	ldr	r3, [pc, #520]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800172a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800172e:	d10b      	bne.n	8001748 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	4b7e      	ldr	r3, [pc, #504]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d05b      	beq.n	80017f4 <HAL_RCC_OscConfig+0x108>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d157      	bne.n	80017f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e242      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001750:	d106      	bne.n	8001760 <HAL_RCC_OscConfig+0x74>
 8001752:	4b76      	ldr	r3, [pc, #472]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a75      	ldr	r2, [pc, #468]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e01d      	b.n	800179c <HAL_RCC_OscConfig+0xb0>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x98>
 800176a:	4b70      	ldr	r3, [pc, #448]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a6f      	ldr	r2, [pc, #444]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b6d      	ldr	r3, [pc, #436]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a6c      	ldr	r2, [pc, #432]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 800177c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0xb0>
 8001784:	4b69      	ldr	r3, [pc, #420]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a68      	ldr	r2, [pc, #416]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 800178a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b66      	ldr	r3, [pc, #408]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a65      	ldr	r2, [pc, #404]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001796:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800179a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d013      	beq.n	80017cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc30 	bl	8001008 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fc2c 	bl	8001008 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	@ 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e207      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b5b      	ldr	r3, [pc, #364]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0xc0>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fc1c 	bl	8001008 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fc18 	bl	8001008 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	@ 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1f3      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	4b51      	ldr	r3, [pc, #324]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0xe8>
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d063      	beq.n	80018ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001802:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180e:	4b47      	ldr	r3, [pc, #284]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001816:	2b08      	cmp	r3, #8
 8001818:	d11c      	bne.n	8001854 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800181a:	4b44      	ldr	r3, [pc, #272]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d116      	bne.n	8001854 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	4b41      	ldr	r3, [pc, #260]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_RCC_OscConfig+0x152>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e1c7      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b3b      	ldr	r3, [pc, #236]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4937      	ldr	r1, [pc, #220]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	e03a      	b.n	80018ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185c:	4b34      	ldr	r3, [pc, #208]	@ (8001930 <HAL_RCC_OscConfig+0x244>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff fbd1 	bl	8001008 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186a:	f7ff fbcd 	bl	8001008 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e1a8      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	4b2b      	ldr	r3, [pc, #172]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b28      	ldr	r3, [pc, #160]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4925      	ldr	r1, [pc, #148]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	e015      	b.n	80018ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189e:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <HAL_RCC_OscConfig+0x244>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fbb0 	bl	8001008 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff fbac 	bl	8001008 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e187      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d036      	beq.n	8001944 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d016      	beq.n	800190c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_RCC_OscConfig+0x248>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff fb90 	bl	8001008 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb8c 	bl	8001008 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e167      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <HAL_RCC_OscConfig+0x240>)
 8001900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x200>
 800190a:	e01b      	b.n	8001944 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_RCC_OscConfig+0x248>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001912:	f7ff fb79 	bl	8001008 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001918:	e00e      	b.n	8001938 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191a:	f7ff fb75 	bl	8001008 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d907      	bls.n	8001938 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e150      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
 800192c:	40023800 	.word	0x40023800
 8001930:	42470000 	.word	0x42470000
 8001934:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	4b88      	ldr	r3, [pc, #544]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 800193a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1ea      	bne.n	800191a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 8097 	beq.w	8001a80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001956:	4b81      	ldr	r3, [pc, #516]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b7d      	ldr	r3, [pc, #500]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b7a      	ldr	r3, [pc, #488]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197e:	2301      	movs	r3, #1
 8001980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	4b77      	ldr	r3, [pc, #476]	@ (8001b60 <HAL_RCC_OscConfig+0x474>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d118      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800198e:	4b74      	ldr	r3, [pc, #464]	@ (8001b60 <HAL_RCC_OscConfig+0x474>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a73      	ldr	r2, [pc, #460]	@ (8001b60 <HAL_RCC_OscConfig+0x474>)
 8001994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199a:	f7ff fb35 	bl	8001008 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a2:	f7ff fb31 	bl	8001008 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e10c      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b60 <HAL_RCC_OscConfig+0x474>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2ea>
 80019c8:	4b64      	ldr	r3, [pc, #400]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019cc:	4a63      	ldr	r2, [pc, #396]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d4:	e01c      	b.n	8001a10 <HAL_RCC_OscConfig+0x324>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x30c>
 80019de:	4b5f      	ldr	r3, [pc, #380]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e2:	4a5e      	ldr	r2, [pc, #376]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ea:	4b5c      	ldr	r3, [pc, #368]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ee:	4a5b      	ldr	r2, [pc, #364]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0x324>
 80019f8:	4b58      	ldr	r3, [pc, #352]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fc:	4a57      	ldr	r2, [pc, #348]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a04:	4b55      	ldr	r3, [pc, #340]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a08:	4a54      	ldr	r2, [pc, #336]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001a0a:	f023 0304 	bic.w	r3, r3, #4
 8001a0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d015      	beq.n	8001a44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff faf6 	bl	8001008 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff faf2 	bl	8001008 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0cb      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	4b49      	ldr	r3, [pc, #292]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0ee      	beq.n	8001a20 <HAL_RCC_OscConfig+0x334>
 8001a42:	e014      	b.n	8001a6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fae0 	bl	8001008 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fadc 	bl	8001008 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0b5      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a62:	4b3e      	ldr	r3, [pc, #248]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ee      	bne.n	8001a4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	4b39      	ldr	r3, [pc, #228]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	4a38      	ldr	r2, [pc, #224]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80a1 	beq.w	8001bcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a8a:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d05c      	beq.n	8001b50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d141      	bne.n	8001b22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <HAL_RCC_OscConfig+0x478>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fab0 	bl	8001008 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff faac 	bl	8001008 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e087      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	019b      	lsls	r3, r3, #6
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	041b      	lsls	r3, r3, #16
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aec:	061b      	lsls	r3, r3, #24
 8001aee:	491b      	ldr	r1, [pc, #108]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_RCC_OscConfig+0x478>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7ff fa85 	bl	8001008 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7ff fa81 	bl	8001008 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e05c      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x416>
 8001b20:	e054      	b.n	8001bcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <HAL_RCC_OscConfig+0x478>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fa6e 	bl	8001008 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff fa6a 	bl	8001008 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e045      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_RCC_OscConfig+0x470>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x444>
 8001b4e:	e03d      	b.n	8001bcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e038      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40007000 	.word	0x40007000
 8001b64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_RCC_OscConfig+0x4ec>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d028      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d121      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d11a      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b98:	4013      	ands	r3, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d111      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	085b      	lsrs	r3, r3, #1
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0cc      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b68      	ldr	r3, [pc, #416]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d90c      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b65      	ldr	r3, [pc, #404]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b63      	ldr	r3, [pc, #396]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b8      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4b59      	ldr	r3, [pc, #356]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a58      	ldr	r2, [pc, #352]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c48:	4b53      	ldr	r3, [pc, #332]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b50      	ldr	r3, [pc, #320]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	494d      	ldr	r1, [pc, #308]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d044      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b47      	ldr	r3, [pc, #284]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d119      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e06f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001caa:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e067      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cba:	4b37      	ldr	r3, [pc, #220]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 0203 	bic.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4934      	ldr	r1, [pc, #208]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ccc:	f7ff f99c 	bl	8001008 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7ff f998 	bl	8001008 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e04f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 020c 	and.w	r2, r3, #12
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1eb      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b25      	ldr	r3, [pc, #148]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d20c      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b22      	ldr	r3, [pc, #136]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e032      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4916      	ldr	r1, [pc, #88]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	490e      	ldr	r1, [pc, #56]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d62:	f000 f821 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001d66:	4602      	mov	r2, r0
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	490a      	ldr	r1, [pc, #40]	@ (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	5ccb      	ldrb	r3, [r1, r3]
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	4a09      	ldr	r2, [pc, #36]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f8fc 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08003aec 	.word	0x08003aec
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dac:	b090      	sub	sp, #64	@ 0x40
 8001dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc0:	4b59      	ldr	r3, [pc, #356]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d00d      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x40>
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	f200 80a1 	bhi.w	8001f14 <HAL_RCC_GetSysClockFreq+0x16c>
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x34>
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dda:	e09b      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ddc:	4b53      	ldr	r3, [pc, #332]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001dde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001de0:	e09b      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001de2:	4b53      	ldr	r3, [pc, #332]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001de4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001de6:	e098      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de8:	4b4f      	ldr	r3, [pc, #316]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001df0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df2:	4b4d      	ldr	r3, [pc, #308]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d028      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	099b      	lsrs	r3, r3, #6
 8001e04:	2200      	movs	r2, #0
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e10:	2100      	movs	r1, #0
 8001e12:	4b47      	ldr	r3, [pc, #284]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e14:	fb03 f201 	mul.w	r2, r3, r1
 8001e18:	2300      	movs	r3, #0
 8001e1a:	fb00 f303 	mul.w	r3, r0, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a43      	ldr	r2, [pc, #268]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e22:	fba0 1202 	umull	r1, r2, r0, r2
 8001e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e28:	460a      	mov	r2, r1
 8001e2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e2e:	4413      	add	r3, r2
 8001e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e34:	2200      	movs	r2, #0
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	61fa      	str	r2, [r7, #28]
 8001e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e42:	f7fe fa25 	bl	8000290 <__aeabi_uldivmod>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e4e:	e053      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e50:	4b35      	ldr	r3, [pc, #212]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	099b      	lsrs	r3, r3, #6
 8001e56:	2200      	movs	r2, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	617a      	str	r2, [r7, #20]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e62:	f04f 0b00 	mov.w	fp, #0
 8001e66:	4652      	mov	r2, sl
 8001e68:	465b      	mov	r3, fp
 8001e6a:	f04f 0000 	mov.w	r0, #0
 8001e6e:	f04f 0100 	mov.w	r1, #0
 8001e72:	0159      	lsls	r1, r3, #5
 8001e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e78:	0150      	lsls	r0, r2, #5
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	ebb2 080a 	subs.w	r8, r2, sl
 8001e82:	eb63 090b 	sbc.w	r9, r3, fp
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e9a:	ebb2 0408 	subs.w	r4, r2, r8
 8001e9e:	eb63 0509 	sbc.w	r5, r3, r9
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	00eb      	lsls	r3, r5, #3
 8001eac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eb0:	00e2      	lsls	r2, r4, #3
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	461d      	mov	r5, r3
 8001eb6:	eb14 030a 	adds.w	r3, r4, sl
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	eb45 030b 	adc.w	r3, r5, fp
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ece:	4629      	mov	r1, r5
 8001ed0:	028b      	lsls	r3, r1, #10
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed8:	4621      	mov	r1, r4
 8001eda:	028a      	lsls	r2, r1, #10
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	60fa      	str	r2, [r7, #12]
 8001ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eec:	f7fe f9d0 	bl	8000290 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3740      	adds	r7, #64	@ 0x40
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	00f42400 	.word	0x00f42400
 8001f30:	017d7840 	.word	0x017d7840

08001f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000

08001f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f50:	f7ff fff0 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	@ (8001f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	08003afc 	.word	0x08003afc

08001f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f78:	f7ff ffdc 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0b5b      	lsrs	r3, r3, #13
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4903      	ldr	r1, [pc, #12]	@ (8001f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	08003afc 	.word	0x08003afc

08001f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e042      	b.n	8002034 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe fc68 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2224      	movs	r2, #36	@ 0x24
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fdbd 	bl	8002b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	@ 0x28
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b20      	cmp	r3, #32
 800205a:	d175      	bne.n	8002148 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_UART_Transmit+0x2c>
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e06e      	b.n	800214a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2221      	movs	r2, #33	@ 0x21
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800207a:	f7fe ffc5 	bl	8001008 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	88fa      	ldrh	r2, [r7, #6]
 8002084:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002094:	d108      	bne.n	80020a8 <HAL_UART_Transmit+0x6c>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	e003      	b.n	80020b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020b0:	e02e      	b.n	8002110 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2200      	movs	r2, #0
 80020ba:	2180      	movs	r1, #128	@ 0x80
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fb1f 	bl	8002700 <UART_WaitOnFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e03a      	b.n	800214a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	3302      	adds	r3, #2
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e007      	b.n	8002102 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3301      	adds	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1cb      	bne.n	80020b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	2140      	movs	r1, #64	@ 0x40
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 faeb 	bl	8002700 <UART_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e006      	b.n	800214a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	4613      	mov	r3, r2
 800215e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b20      	cmp	r3, #32
 800216a:	d112      	bne.n	8002192 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_UART_Receive_IT+0x26>
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e00b      	b.n	8002194 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	461a      	mov	r2, r3
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fb12 	bl	80027b2 <UART_Start_Receive_IT>
 800218e:	4603      	mov	r3, r0
 8002190:	e000      	b.n	8002194 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002192:	2302      	movs	r3, #2
  }
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0ba      	sub	sp, #232	@ 0xe8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80021da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10f      	bne.n	8002202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_UART_IRQHandler+0x66>
 80021ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fbf2 	bl	80029e4 <UART_Receive_IT>
      return;
 8002200:	e25b      	b.n	80026ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80de 	beq.w	80023c8 <HAL_UART_IRQHandler+0x22c>
 800220c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d106      	bne.n	8002226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800221c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80d1 	beq.w	80023c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_UART_IRQHandler+0xae>
 8002232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_UART_IRQHandler+0xd2>
 8002256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	f043 0202 	orr.w	r2, r3, #2
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800226e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_UART_IRQHandler+0xf6>
 800227a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f043 0204 	orr.w	r2, r3, #4
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d011      	beq.n	80022c2 <HAL_UART_IRQHandler+0x126>
 800229e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	f043 0208 	orr.w	r2, r3, #8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 81f2 	beq.w	80026b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_UART_IRQHandler+0x14e>
 80022d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 fb7d 	bl	80029e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f4:	2b40      	cmp	r3, #64	@ 0x40
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <HAL_UART_IRQHandler+0x17a>
 800230e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d04f      	beq.n	80023b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fa85 	bl	8002826 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002326:	2b40      	cmp	r3, #64	@ 0x40
 8002328:	d141      	bne.n	80023ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3314      	adds	r3, #20
 8002330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002338:	e853 3f00 	ldrex	r3, [r3]
 800233c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3314      	adds	r3, #20
 8002352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800235a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002366:	e841 2300 	strex	r3, r2, [r1]
 800236a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800236e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1d9      	bne.n	800232a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d013      	beq.n	80023a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002382:	4a7e      	ldr	r2, [pc, #504]	@ (800257c <HAL_UART_IRQHandler+0x3e0>)
 8002384:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe ffed 	bl	800136a <HAL_DMA_Abort_IT>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d016      	beq.n	80023c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023a0:	4610      	mov	r0, r2
 80023a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a4:	e00e      	b.n	80023c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f994 	bl	80026d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ac:	e00a      	b.n	80023c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f990 	bl	80026d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b4:	e006      	b.n	80023c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f98c 	bl	80026d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80023c2:	e175      	b.n	80026b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c4:	bf00      	nop
    return;
 80023c6:	e173      	b.n	80026b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 814f 	bne.w	8002670 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8148 	beq.w	8002670 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8141 	beq.w	8002670 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800240e:	2b40      	cmp	r3, #64	@ 0x40
 8002410:	f040 80b6 	bne.w	8002580 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8145 	beq.w	80026b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800242e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002432:	429a      	cmp	r2, r3
 8002434:	f080 813e 	bcs.w	80026b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800243e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800244a:	f000 8088 	beq.w	800255e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800245c:	e853 3f00 	ldrex	r3, [r3]
 8002460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002464:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800246c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	330c      	adds	r3, #12
 8002476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800247a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800247e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002482:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002486:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800248a:	e841 2300 	strex	r3, r2, [r1]
 800248e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1d9      	bne.n	800244e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3314      	adds	r3, #20
 80024a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024a4:	e853 3f00 	ldrex	r3, [r3]
 80024a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80024aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3314      	adds	r3, #20
 80024ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80024c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80024c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80024ca:	e841 2300 	strex	r3, r2, [r1]
 80024ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80024d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1e1      	bne.n	800249a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3314      	adds	r3, #20
 80024dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024e0:	e853 3f00 	ldrex	r3, [r3]
 80024e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80024e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3314      	adds	r3, #20
 80024f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80024fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002500:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002502:	e841 2300 	strex	r3, r2, [r1]
 8002506:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1e3      	bne.n	80024d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	330c      	adds	r3, #12
 8002522:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002526:	e853 3f00 	ldrex	r3, [r3]
 800252a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800252c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800252e:	f023 0310 	bic.w	r3, r3, #16
 8002532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	330c      	adds	r3, #12
 800253c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002540:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002542:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002544:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002546:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002548:	e841 2300 	strex	r3, r2, [r1]
 800254c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800254e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e3      	bne.n	800251c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fe96 	bl	800128a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800256c:	b29b      	uxth	r3, r3
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	b29b      	uxth	r3, r3
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f8b7 	bl	80026e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800257a:	e09b      	b.n	80026b4 <HAL_UART_IRQHandler+0x518>
 800257c:	080028ed 	.word	0x080028ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002588:	b29b      	uxth	r3, r3
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 808e 	beq.w	80026b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800259c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8089 	beq.w	80026b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	330c      	adds	r3, #12
 80025ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b0:	e853 3f00 	ldrex	r3, [r3]
 80025b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80025b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	330c      	adds	r3, #12
 80025c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80025ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80025cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025d2:	e841 2300 	strex	r3, r2, [r1]
 80025d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1e3      	bne.n	80025a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	3314      	adds	r3, #20
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	e853 3f00 	ldrex	r3, [r3]
 80025ec:	623b      	str	r3, [r7, #32]
   return(result);
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3314      	adds	r3, #20
 80025fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002602:	633a      	str	r2, [r7, #48]	@ 0x30
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800260a:	e841 2300 	strex	r3, r2, [r1]
 800260e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e3      	bne.n	80025de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	e853 3f00 	ldrex	r3, [r3]
 8002632:	60fb      	str	r3, [r7, #12]
   return(result);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0310 	bic.w	r3, r3, #16
 800263a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002648:	61fa      	str	r2, [r7, #28]
 800264a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264c:	69b9      	ldr	r1, [r7, #24]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	e841 2300 	strex	r3, r2, [r1]
 8002654:	617b      	str	r3, [r7, #20]
   return(result);
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e3      	bne.n	8002624 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f83d 	bl	80026e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800266e:	e023      	b.n	80026b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <HAL_UART_IRQHandler+0x4f4>
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f943 	bl	8002914 <UART_Transmit_IT>
    return;
 800268e:	e014      	b.n	80026ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00e      	beq.n	80026ba <HAL_UART_IRQHandler+0x51e>
 800269c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f983 	bl	80029b4 <UART_EndTransmit_IT>
    return;
 80026ae:	e004      	b.n	80026ba <HAL_UART_IRQHandler+0x51e>
    return;
 80026b0:	bf00      	nop
 80026b2:	e002      	b.n	80026ba <HAL_UART_IRQHandler+0x51e>
      return;
 80026b4:	bf00      	nop
 80026b6:	e000      	b.n	80026ba <HAL_UART_IRQHandler+0x51e>
      return;
 80026b8:	bf00      	nop
  }
}
 80026ba:	37e8      	adds	r7, #232	@ 0xe8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002710:	e03b      	b.n	800278a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d037      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271a:	f7fe fc75 	bl	8001008 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	6a3a      	ldr	r2, [r7, #32]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <UART_WaitOnFlagUntilTimeout+0x30>
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e03a      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d023      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b80      	cmp	r3, #128	@ 0x80
 8002746:	d020      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b40      	cmp	r3, #64	@ 0x40
 800274c:	d01d      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b08      	cmp	r3, #8
 800275a:	d116      	bne.n	800278a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f857 	bl	8002826 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2208      	movs	r2, #8
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4013      	ands	r3, r2
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	429a      	cmp	r2, r3
 8002798:	bf0c      	ite	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	2300      	movne	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d0b4      	beq.n	8002712 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	4613      	mov	r3, r2
 80027be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	88fa      	ldrh	r2, [r7, #6]
 80027ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	88fa      	ldrh	r2, [r7, #6]
 80027d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2222      	movs	r2, #34	@ 0x22
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0220 	orr.w	r2, r2, #32
 8002816:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002826:	b480      	push	{r7}
 8002828:	b095      	sub	sp, #84	@ 0x54
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002838:	e853 3f00 	ldrex	r3, [r3]
 800283c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800283e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800284e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002852:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002854:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002856:	e841 2300 	strex	r3, r2, [r1]
 800285a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800285c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1e5      	bne.n	800282e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3314      	adds	r3, #20
 8002868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	e853 3f00 	ldrex	r3, [r3]
 8002870:	61fb      	str	r3, [r7, #28]
   return(result);
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3314      	adds	r3, #20
 8002880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800288a:	e841 2300 	strex	r3, r2, [r1]
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e5      	bne.n	8002862 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	2b01      	cmp	r3, #1
 800289c:	d119      	bne.n	80028d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	e853 3f00 	ldrex	r3, [r3]
 80028ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f023 0310 	bic.w	r3, r3, #16
 80028b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028be:	61ba      	str	r2, [r7, #24]
 80028c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	6979      	ldr	r1, [r7, #20]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	e841 2300 	strex	r3, r2, [r1]
 80028ca:	613b      	str	r3, [r7, #16]
   return(result);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e5      	bne.n	800289e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028e0:	bf00      	nop
 80028e2:	3754      	adds	r7, #84	@ 0x54
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7ff fee4 	bl	80026d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b21      	cmp	r3, #33	@ 0x21
 8002926:	d13e      	bne.n	80029a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002930:	d114      	bne.n	800295c <UART_Transmit_IT+0x48>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d110      	bne.n	800295c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800294e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	1c9a      	adds	r2, r3, #2
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	621a      	str	r2, [r3, #32]
 800295a:	e008      	b.n	800296e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	1c59      	adds	r1, r3, #1
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6211      	str	r1, [r2, #32]
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29b      	uxth	r3, r3
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4619      	mov	r1, r3
 800297c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002990:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029a6:	2302      	movs	r3, #2
  }
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff fe73 	bl	80026c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	@ 0x30
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b22      	cmp	r3, #34	@ 0x22
 80029f6:	f040 80ae 	bne.w	8002b56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a02:	d117      	bne.n	8002a34 <UART_Receive_IT+0x50>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d113      	bne.n	8002a34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	1c9a      	adds	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a32:	e026      	b.n	8002a82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a46:	d007      	beq.n	8002a58 <UART_Receive_IT+0x74>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <UART_Receive_IT+0x82>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d106      	bne.n	8002a66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	e008      	b.n	8002a78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d15d      	bne.n	8002b52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0220 	bic.w	r2, r2, #32
 8002aa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ab4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d135      	bne.n	8002b48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	613b      	str	r3, [r7, #16]
   return(result);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f023 0310 	bic.w	r3, r3, #16
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b02:	623a      	str	r2, [r7, #32]
 8002b04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	69f9      	ldr	r1, [r7, #28]
 8002b08:	6a3a      	ldr	r2, [r7, #32]
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e5      	bne.n	8002ae2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d10a      	bne.n	8002b3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fdd1 	bl	80026e8 <HAL_UARTEx_RxEventCallback>
 8002b46:	e002      	b.n	8002b4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fd fd37 	bl	80005bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e002      	b.n	8002b58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
  }
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3730      	adds	r7, #48	@ 0x30
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b0c0      	sub	sp, #256	@ 0x100
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7c:	68d9      	ldr	r1, [r3, #12]
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	ea40 0301 	orr.w	r3, r0, r1
 8002b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002bb8:	f021 010c 	bic.w	r1, r1, #12
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bda:	6999      	ldr	r1, [r3, #24]
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	ea40 0301 	orr.w	r3, r0, r1
 8002be6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b8f      	ldr	r3, [pc, #572]	@ (8002e2c <UART_SetConfig+0x2cc>)
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d005      	beq.n	8002c00 <UART_SetConfig+0xa0>
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8002e30 <UART_SetConfig+0x2d0>)
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d104      	bne.n	8002c0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c00:	f7ff f9b8 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 8002c04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c08:	e003      	b.n	8002c12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c0a:	f7ff f99f 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 8002c0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c1c:	f040 810c 	bne.w	8002e38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c24:	2200      	movs	r2, #0
 8002c26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c32:	4622      	mov	r2, r4
 8002c34:	462b      	mov	r3, r5
 8002c36:	1891      	adds	r1, r2, r2
 8002c38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c3a:	415b      	adcs	r3, r3
 8002c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c42:	4621      	mov	r1, r4
 8002c44:	eb12 0801 	adds.w	r8, r2, r1
 8002c48:	4629      	mov	r1, r5
 8002c4a:	eb43 0901 	adc.w	r9, r3, r1
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c62:	4690      	mov	r8, r2
 8002c64:	4699      	mov	r9, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	eb18 0303 	adds.w	r3, r8, r3
 8002c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c70:	462b      	mov	r3, r5
 8002c72:	eb49 0303 	adc.w	r3, r9, r3
 8002c76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c8e:	460b      	mov	r3, r1
 8002c90:	18db      	adds	r3, r3, r3
 8002c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c94:	4613      	mov	r3, r2
 8002c96:	eb42 0303 	adc.w	r3, r2, r3
 8002c9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ca0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ca4:	f7fd faf4 	bl	8000290 <__aeabi_uldivmod>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4b61      	ldr	r3, [pc, #388]	@ (8002e34 <UART_SetConfig+0x2d4>)
 8002cae:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	011c      	lsls	r4, r3, #4
 8002cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002cc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002cc8:	4642      	mov	r2, r8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	1891      	adds	r1, r2, r2
 8002cce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002cd0:	415b      	adcs	r3, r3
 8002cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cd8:	4641      	mov	r1, r8
 8002cda:	eb12 0a01 	adds.w	sl, r2, r1
 8002cde:	4649      	mov	r1, r9
 8002ce0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf8:	4692      	mov	sl, r2
 8002cfa:	469b      	mov	fp, r3
 8002cfc:	4643      	mov	r3, r8
 8002cfe:	eb1a 0303 	adds.w	r3, sl, r3
 8002d02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d06:	464b      	mov	r3, r9
 8002d08:	eb4b 0303 	adc.w	r3, fp, r3
 8002d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d24:	460b      	mov	r3, r1
 8002d26:	18db      	adds	r3, r3, r3
 8002d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	eb42 0303 	adc.w	r3, r2, r3
 8002d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d3a:	f7fd faa9 	bl	8000290 <__aeabi_uldivmod>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	4b3b      	ldr	r3, [pc, #236]	@ (8002e34 <UART_SetConfig+0x2d4>)
 8002d46:	fba3 2301 	umull	r2, r3, r3, r1
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2264      	movs	r2, #100	@ 0x64
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	1acb      	subs	r3, r1, r3
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d5a:	4b36      	ldr	r3, [pc, #216]	@ (8002e34 <UART_SetConfig+0x2d4>)
 8002d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d68:	441c      	add	r4, r3
 8002d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	464b      	mov	r3, r9
 8002d80:	1891      	adds	r1, r2, r2
 8002d82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d84:	415b      	adcs	r3, r3
 8002d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	1851      	adds	r1, r2, r1
 8002d90:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d92:	4649      	mov	r1, r9
 8002d94:	414b      	adcs	r3, r1
 8002d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002da4:	4659      	mov	r1, fp
 8002da6:	00cb      	lsls	r3, r1, #3
 8002da8:	4651      	mov	r1, sl
 8002daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dae:	4651      	mov	r1, sl
 8002db0:	00ca      	lsls	r2, r1, #3
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	4642      	mov	r2, r8
 8002dba:	189b      	adds	r3, r3, r2
 8002dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	460a      	mov	r2, r1
 8002dc4:	eb42 0303 	adc.w	r3, r2, r3
 8002dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002dd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ddc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002de0:	460b      	mov	r3, r1
 8002de2:	18db      	adds	r3, r3, r3
 8002de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002de6:	4613      	mov	r3, r2
 8002de8:	eb42 0303 	adc.w	r3, r2, r3
 8002dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002df2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002df6:	f7fd fa4b 	bl	8000290 <__aeabi_uldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002e34 <UART_SetConfig+0x2d4>)
 8002e00:	fba3 1302 	umull	r1, r3, r3, r2
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	2164      	movs	r1, #100	@ 0x64
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	3332      	adds	r3, #50	@ 0x32
 8002e12:	4a08      	ldr	r2, [pc, #32]	@ (8002e34 <UART_SetConfig+0x2d4>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	f003 0207 	and.w	r2, r3, #7
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4422      	add	r2, r4
 8002e26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e28:	e106      	b.n	8003038 <UART_SetConfig+0x4d8>
 8002e2a:	bf00      	nop
 8002e2c:	40011000 	.word	0x40011000
 8002e30:	40011400 	.word	0x40011400
 8002e34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e4a:	4642      	mov	r2, r8
 8002e4c:	464b      	mov	r3, r9
 8002e4e:	1891      	adds	r1, r2, r2
 8002e50:	6239      	str	r1, [r7, #32]
 8002e52:	415b      	adcs	r3, r3
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	1854      	adds	r4, r2, r1
 8002e5e:	4649      	mov	r1, r9
 8002e60:	eb43 0501 	adc.w	r5, r3, r1
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	00eb      	lsls	r3, r5, #3
 8002e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e72:	00e2      	lsls	r2, r4, #3
 8002e74:	4614      	mov	r4, r2
 8002e76:	461d      	mov	r5, r3
 8002e78:	4643      	mov	r3, r8
 8002e7a:	18e3      	adds	r3, r4, r3
 8002e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e80:	464b      	mov	r3, r9
 8002e82:	eb45 0303 	adc.w	r3, r5, r3
 8002e86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	008b      	lsls	r3, r1, #2
 8002eaa:	4621      	mov	r1, r4
 8002eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	008a      	lsls	r2, r1, #2
 8002eb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002eb8:	f7fd f9ea 	bl	8000290 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4b60      	ldr	r3, [pc, #384]	@ (8003044 <UART_SetConfig+0x4e4>)
 8002ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	011c      	lsls	r4, r3, #4
 8002eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ed4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ed8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002edc:	4642      	mov	r2, r8
 8002ede:	464b      	mov	r3, r9
 8002ee0:	1891      	adds	r1, r2, r2
 8002ee2:	61b9      	str	r1, [r7, #24]
 8002ee4:	415b      	adcs	r3, r3
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eec:	4641      	mov	r1, r8
 8002eee:	1851      	adds	r1, r2, r1
 8002ef0:	6139      	str	r1, [r7, #16]
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	414b      	adcs	r3, r1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f04:	4659      	mov	r1, fp
 8002f06:	00cb      	lsls	r3, r1, #3
 8002f08:	4651      	mov	r1, sl
 8002f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f0e:	4651      	mov	r1, sl
 8002f10:	00ca      	lsls	r2, r1, #3
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	4642      	mov	r2, r8
 8002f1a:	189b      	adds	r3, r3, r2
 8002f1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f20:	464b      	mov	r3, r9
 8002f22:	460a      	mov	r2, r1
 8002f24:	eb42 0303 	adc.w	r3, r2, r3
 8002f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f44:	4649      	mov	r1, r9
 8002f46:	008b      	lsls	r3, r1, #2
 8002f48:	4641      	mov	r1, r8
 8002f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f4e:	4641      	mov	r1, r8
 8002f50:	008a      	lsls	r2, r1, #2
 8002f52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f56:	f7fd f99b 	bl	8000290 <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4b38      	ldr	r3, [pc, #224]	@ (8003044 <UART_SetConfig+0x4e4>)
 8002f62:	fba3 2301 	umull	r2, r3, r3, r1
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2264      	movs	r2, #100	@ 0x64
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	1acb      	subs	r3, r1, r3
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	3332      	adds	r3, #50	@ 0x32
 8002f74:	4a33      	ldr	r2, [pc, #204]	@ (8003044 <UART_SetConfig+0x4e4>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f80:	441c      	add	r4, r3
 8002f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f86:	2200      	movs	r2, #0
 8002f88:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f90:	4642      	mov	r2, r8
 8002f92:	464b      	mov	r3, r9
 8002f94:	1891      	adds	r1, r2, r2
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	415b      	adcs	r3, r3
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	1851      	adds	r1, r2, r1
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	414b      	adcs	r3, r1
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fb8:	4659      	mov	r1, fp
 8002fba:	00cb      	lsls	r3, r1, #3
 8002fbc:	4651      	mov	r1, sl
 8002fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fc2:	4651      	mov	r1, sl
 8002fc4:	00ca      	lsls	r2, r1, #3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4642      	mov	r2, r8
 8002fce:	189b      	adds	r3, r3, r2
 8002fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	eb42 0303 	adc.w	r3, r2, r3
 8002fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fe6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	008b      	lsls	r3, r1, #2
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ffe:	4641      	mov	r1, r8
 8003000:	008a      	lsls	r2, r1, #2
 8003002:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003006:	f7fd f943 	bl	8000290 <__aeabi_uldivmod>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <UART_SetConfig+0x4e4>)
 8003010:	fba3 1302 	umull	r1, r3, r3, r2
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	2164      	movs	r1, #100	@ 0x64
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	3332      	adds	r3, #50	@ 0x32
 8003022:	4a08      	ldr	r2, [pc, #32]	@ (8003044 <UART_SetConfig+0x4e4>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4422      	add	r2, r4
 8003036:	609a      	str	r2, [r3, #8]
}
 8003038:	bf00      	nop
 800303a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800303e:	46bd      	mov	sp, r7
 8003040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003044:	51eb851f 	.word	0x51eb851f

08003048 <sniprintf>:
 8003048:	b40c      	push	{r2, r3}
 800304a:	b530      	push	{r4, r5, lr}
 800304c:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <sniprintf+0x68>)
 800304e:	1e0c      	subs	r4, r1, #0
 8003050:	681d      	ldr	r5, [r3, #0]
 8003052:	b09d      	sub	sp, #116	@ 0x74
 8003054:	da08      	bge.n	8003068 <sniprintf+0x20>
 8003056:	238b      	movs	r3, #139	@ 0x8b
 8003058:	602b      	str	r3, [r5, #0]
 800305a:	f04f 30ff 	mov.w	r0, #4294967295
 800305e:	b01d      	add	sp, #116	@ 0x74
 8003060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003064:	b002      	add	sp, #8
 8003066:	4770      	bx	lr
 8003068:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800306c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003076:	bf14      	ite	ne
 8003078:	f104 33ff 	addne.w	r3, r4, #4294967295
 800307c:	4623      	moveq	r3, r4
 800307e:	9304      	str	r3, [sp, #16]
 8003080:	9307      	str	r3, [sp, #28]
 8003082:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003086:	9002      	str	r0, [sp, #8]
 8003088:	9006      	str	r0, [sp, #24]
 800308a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800308e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003090:	ab21      	add	r3, sp, #132	@ 0x84
 8003092:	a902      	add	r1, sp, #8
 8003094:	4628      	mov	r0, r5
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	f000 f9aa 	bl	80033f0 <_svfiprintf_r>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	bfbc      	itt	lt
 80030a0:	238b      	movlt	r3, #139	@ 0x8b
 80030a2:	602b      	strlt	r3, [r5, #0]
 80030a4:	2c00      	cmp	r4, #0
 80030a6:	d0da      	beq.n	800305e <sniprintf+0x16>
 80030a8:	9b02      	ldr	r3, [sp, #8]
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e7d6      	b.n	800305e <sniprintf+0x16>
 80030b0:	2000000c 	.word	0x2000000c

080030b4 <memset>:
 80030b4:	4402      	add	r2, r0
 80030b6:	4603      	mov	r3, r0
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d100      	bne.n	80030be <memset+0xa>
 80030bc:	4770      	bx	lr
 80030be:	f803 1b01 	strb.w	r1, [r3], #1
 80030c2:	e7f9      	b.n	80030b8 <memset+0x4>

080030c4 <strstr>:
 80030c4:	780a      	ldrb	r2, [r1, #0]
 80030c6:	b570      	push	{r4, r5, r6, lr}
 80030c8:	b96a      	cbnz	r2, 80030e6 <strstr+0x22>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d109      	bne.n	80030e4 <strstr+0x20>
 80030d0:	460c      	mov	r4, r1
 80030d2:	4605      	mov	r5, r0
 80030d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f6      	beq.n	80030ca <strstr+0x6>
 80030dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80030e0:	429e      	cmp	r6, r3
 80030e2:	d0f7      	beq.n	80030d4 <strstr+0x10>
 80030e4:	3001      	adds	r0, #1
 80030e6:	7803      	ldrb	r3, [r0, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ef      	bne.n	80030cc <strstr+0x8>
 80030ec:	4618      	mov	r0, r3
 80030ee:	e7ec      	b.n	80030ca <strstr+0x6>

080030f0 <__errno>:
 80030f0:	4b01      	ldr	r3, [pc, #4]	@ (80030f8 <__errno+0x8>)
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	2000000c 	.word	0x2000000c

080030fc <__libc_init_array>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003134 <__libc_init_array+0x38>)
 8003100:	4c0d      	ldr	r4, [pc, #52]	@ (8003138 <__libc_init_array+0x3c>)
 8003102:	1b64      	subs	r4, r4, r5
 8003104:	10a4      	asrs	r4, r4, #2
 8003106:	2600      	movs	r6, #0
 8003108:	42a6      	cmp	r6, r4
 800310a:	d109      	bne.n	8003120 <__libc_init_array+0x24>
 800310c:	4d0b      	ldr	r5, [pc, #44]	@ (800313c <__libc_init_array+0x40>)
 800310e:	4c0c      	ldr	r4, [pc, #48]	@ (8003140 <__libc_init_array+0x44>)
 8003110:	f000 fc64 	bl	80039dc <_init>
 8003114:	1b64      	subs	r4, r4, r5
 8003116:	10a4      	asrs	r4, r4, #2
 8003118:	2600      	movs	r6, #0
 800311a:	42a6      	cmp	r6, r4
 800311c:	d105      	bne.n	800312a <__libc_init_array+0x2e>
 800311e:	bd70      	pop	{r4, r5, r6, pc}
 8003120:	f855 3b04 	ldr.w	r3, [r5], #4
 8003124:	4798      	blx	r3
 8003126:	3601      	adds	r6, #1
 8003128:	e7ee      	b.n	8003108 <__libc_init_array+0xc>
 800312a:	f855 3b04 	ldr.w	r3, [r5], #4
 800312e:	4798      	blx	r3
 8003130:	3601      	adds	r6, #1
 8003132:	e7f2      	b.n	800311a <__libc_init_array+0x1e>
 8003134:	08003b40 	.word	0x08003b40
 8003138:	08003b40 	.word	0x08003b40
 800313c:	08003b40 	.word	0x08003b40
 8003140:	08003b44 	.word	0x08003b44

08003144 <__retarget_lock_acquire_recursive>:
 8003144:	4770      	bx	lr

08003146 <__retarget_lock_release_recursive>:
 8003146:	4770      	bx	lr

08003148 <_free_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	4605      	mov	r5, r0
 800314c:	2900      	cmp	r1, #0
 800314e:	d041      	beq.n	80031d4 <_free_r+0x8c>
 8003150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003154:	1f0c      	subs	r4, r1, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	bfb8      	it	lt
 800315a:	18e4      	addlt	r4, r4, r3
 800315c:	f000 f8e0 	bl	8003320 <__malloc_lock>
 8003160:	4a1d      	ldr	r2, [pc, #116]	@ (80031d8 <_free_r+0x90>)
 8003162:	6813      	ldr	r3, [r2, #0]
 8003164:	b933      	cbnz	r3, 8003174 <_free_r+0x2c>
 8003166:	6063      	str	r3, [r4, #4]
 8003168:	6014      	str	r4, [r2, #0]
 800316a:	4628      	mov	r0, r5
 800316c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003170:	f000 b8dc 	b.w	800332c <__malloc_unlock>
 8003174:	42a3      	cmp	r3, r4
 8003176:	d908      	bls.n	800318a <_free_r+0x42>
 8003178:	6820      	ldr	r0, [r4, #0]
 800317a:	1821      	adds	r1, r4, r0
 800317c:	428b      	cmp	r3, r1
 800317e:	bf01      	itttt	eq
 8003180:	6819      	ldreq	r1, [r3, #0]
 8003182:	685b      	ldreq	r3, [r3, #4]
 8003184:	1809      	addeq	r1, r1, r0
 8003186:	6021      	streq	r1, [r4, #0]
 8003188:	e7ed      	b.n	8003166 <_free_r+0x1e>
 800318a:	461a      	mov	r2, r3
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	b10b      	cbz	r3, 8003194 <_free_r+0x4c>
 8003190:	42a3      	cmp	r3, r4
 8003192:	d9fa      	bls.n	800318a <_free_r+0x42>
 8003194:	6811      	ldr	r1, [r2, #0]
 8003196:	1850      	adds	r0, r2, r1
 8003198:	42a0      	cmp	r0, r4
 800319a:	d10b      	bne.n	80031b4 <_free_r+0x6c>
 800319c:	6820      	ldr	r0, [r4, #0]
 800319e:	4401      	add	r1, r0
 80031a0:	1850      	adds	r0, r2, r1
 80031a2:	4283      	cmp	r3, r0
 80031a4:	6011      	str	r1, [r2, #0]
 80031a6:	d1e0      	bne.n	800316a <_free_r+0x22>
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	6053      	str	r3, [r2, #4]
 80031ae:	4408      	add	r0, r1
 80031b0:	6010      	str	r0, [r2, #0]
 80031b2:	e7da      	b.n	800316a <_free_r+0x22>
 80031b4:	d902      	bls.n	80031bc <_free_r+0x74>
 80031b6:	230c      	movs	r3, #12
 80031b8:	602b      	str	r3, [r5, #0]
 80031ba:	e7d6      	b.n	800316a <_free_r+0x22>
 80031bc:	6820      	ldr	r0, [r4, #0]
 80031be:	1821      	adds	r1, r4, r0
 80031c0:	428b      	cmp	r3, r1
 80031c2:	bf04      	itt	eq
 80031c4:	6819      	ldreq	r1, [r3, #0]
 80031c6:	685b      	ldreq	r3, [r3, #4]
 80031c8:	6063      	str	r3, [r4, #4]
 80031ca:	bf04      	itt	eq
 80031cc:	1809      	addeq	r1, r1, r0
 80031ce:	6021      	streq	r1, [r4, #0]
 80031d0:	6054      	str	r4, [r2, #4]
 80031d2:	e7ca      	b.n	800316a <_free_r+0x22>
 80031d4:	bd38      	pop	{r3, r4, r5, pc}
 80031d6:	bf00      	nop
 80031d8:	20000344 	.word	0x20000344

080031dc <sbrk_aligned>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4e0f      	ldr	r6, [pc, #60]	@ (800321c <sbrk_aligned+0x40>)
 80031e0:	460c      	mov	r4, r1
 80031e2:	6831      	ldr	r1, [r6, #0]
 80031e4:	4605      	mov	r5, r0
 80031e6:	b911      	cbnz	r1, 80031ee <sbrk_aligned+0x12>
 80031e8:	f000 fba4 	bl	8003934 <_sbrk_r>
 80031ec:	6030      	str	r0, [r6, #0]
 80031ee:	4621      	mov	r1, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 fb9f 	bl	8003934 <_sbrk_r>
 80031f6:	1c43      	adds	r3, r0, #1
 80031f8:	d103      	bne.n	8003202 <sbrk_aligned+0x26>
 80031fa:	f04f 34ff 	mov.w	r4, #4294967295
 80031fe:	4620      	mov	r0, r4
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	1cc4      	adds	r4, r0, #3
 8003204:	f024 0403 	bic.w	r4, r4, #3
 8003208:	42a0      	cmp	r0, r4
 800320a:	d0f8      	beq.n	80031fe <sbrk_aligned+0x22>
 800320c:	1a21      	subs	r1, r4, r0
 800320e:	4628      	mov	r0, r5
 8003210:	f000 fb90 	bl	8003934 <_sbrk_r>
 8003214:	3001      	adds	r0, #1
 8003216:	d1f2      	bne.n	80031fe <sbrk_aligned+0x22>
 8003218:	e7ef      	b.n	80031fa <sbrk_aligned+0x1e>
 800321a:	bf00      	nop
 800321c:	20000340 	.word	0x20000340

08003220 <_malloc_r>:
 8003220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003224:	1ccd      	adds	r5, r1, #3
 8003226:	f025 0503 	bic.w	r5, r5, #3
 800322a:	3508      	adds	r5, #8
 800322c:	2d0c      	cmp	r5, #12
 800322e:	bf38      	it	cc
 8003230:	250c      	movcc	r5, #12
 8003232:	2d00      	cmp	r5, #0
 8003234:	4606      	mov	r6, r0
 8003236:	db01      	blt.n	800323c <_malloc_r+0x1c>
 8003238:	42a9      	cmp	r1, r5
 800323a:	d904      	bls.n	8003246 <_malloc_r+0x26>
 800323c:	230c      	movs	r3, #12
 800323e:	6033      	str	r3, [r6, #0]
 8003240:	2000      	movs	r0, #0
 8003242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003246:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800331c <_malloc_r+0xfc>
 800324a:	f000 f869 	bl	8003320 <__malloc_lock>
 800324e:	f8d8 3000 	ldr.w	r3, [r8]
 8003252:	461c      	mov	r4, r3
 8003254:	bb44      	cbnz	r4, 80032a8 <_malloc_r+0x88>
 8003256:	4629      	mov	r1, r5
 8003258:	4630      	mov	r0, r6
 800325a:	f7ff ffbf 	bl	80031dc <sbrk_aligned>
 800325e:	1c43      	adds	r3, r0, #1
 8003260:	4604      	mov	r4, r0
 8003262:	d158      	bne.n	8003316 <_malloc_r+0xf6>
 8003264:	f8d8 4000 	ldr.w	r4, [r8]
 8003268:	4627      	mov	r7, r4
 800326a:	2f00      	cmp	r7, #0
 800326c:	d143      	bne.n	80032f6 <_malloc_r+0xd6>
 800326e:	2c00      	cmp	r4, #0
 8003270:	d04b      	beq.n	800330a <_malloc_r+0xea>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	4639      	mov	r1, r7
 8003276:	4630      	mov	r0, r6
 8003278:	eb04 0903 	add.w	r9, r4, r3
 800327c:	f000 fb5a 	bl	8003934 <_sbrk_r>
 8003280:	4581      	cmp	r9, r0
 8003282:	d142      	bne.n	800330a <_malloc_r+0xea>
 8003284:	6821      	ldr	r1, [r4, #0]
 8003286:	1a6d      	subs	r5, r5, r1
 8003288:	4629      	mov	r1, r5
 800328a:	4630      	mov	r0, r6
 800328c:	f7ff ffa6 	bl	80031dc <sbrk_aligned>
 8003290:	3001      	adds	r0, #1
 8003292:	d03a      	beq.n	800330a <_malloc_r+0xea>
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	442b      	add	r3, r5
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	f8d8 3000 	ldr.w	r3, [r8]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	bb62      	cbnz	r2, 80032fc <_malloc_r+0xdc>
 80032a2:	f8c8 7000 	str.w	r7, [r8]
 80032a6:	e00f      	b.n	80032c8 <_malloc_r+0xa8>
 80032a8:	6822      	ldr	r2, [r4, #0]
 80032aa:	1b52      	subs	r2, r2, r5
 80032ac:	d420      	bmi.n	80032f0 <_malloc_r+0xd0>
 80032ae:	2a0b      	cmp	r2, #11
 80032b0:	d917      	bls.n	80032e2 <_malloc_r+0xc2>
 80032b2:	1961      	adds	r1, r4, r5
 80032b4:	42a3      	cmp	r3, r4
 80032b6:	6025      	str	r5, [r4, #0]
 80032b8:	bf18      	it	ne
 80032ba:	6059      	strne	r1, [r3, #4]
 80032bc:	6863      	ldr	r3, [r4, #4]
 80032be:	bf08      	it	eq
 80032c0:	f8c8 1000 	streq.w	r1, [r8]
 80032c4:	5162      	str	r2, [r4, r5]
 80032c6:	604b      	str	r3, [r1, #4]
 80032c8:	4630      	mov	r0, r6
 80032ca:	f000 f82f 	bl	800332c <__malloc_unlock>
 80032ce:	f104 000b 	add.w	r0, r4, #11
 80032d2:	1d23      	adds	r3, r4, #4
 80032d4:	f020 0007 	bic.w	r0, r0, #7
 80032d8:	1ac2      	subs	r2, r0, r3
 80032da:	bf1c      	itt	ne
 80032dc:	1a1b      	subne	r3, r3, r0
 80032de:	50a3      	strne	r3, [r4, r2]
 80032e0:	e7af      	b.n	8003242 <_malloc_r+0x22>
 80032e2:	6862      	ldr	r2, [r4, #4]
 80032e4:	42a3      	cmp	r3, r4
 80032e6:	bf0c      	ite	eq
 80032e8:	f8c8 2000 	streq.w	r2, [r8]
 80032ec:	605a      	strne	r2, [r3, #4]
 80032ee:	e7eb      	b.n	80032c8 <_malloc_r+0xa8>
 80032f0:	4623      	mov	r3, r4
 80032f2:	6864      	ldr	r4, [r4, #4]
 80032f4:	e7ae      	b.n	8003254 <_malloc_r+0x34>
 80032f6:	463c      	mov	r4, r7
 80032f8:	687f      	ldr	r7, [r7, #4]
 80032fa:	e7b6      	b.n	800326a <_malloc_r+0x4a>
 80032fc:	461a      	mov	r2, r3
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	42a3      	cmp	r3, r4
 8003302:	d1fb      	bne.n	80032fc <_malloc_r+0xdc>
 8003304:	2300      	movs	r3, #0
 8003306:	6053      	str	r3, [r2, #4]
 8003308:	e7de      	b.n	80032c8 <_malloc_r+0xa8>
 800330a:	230c      	movs	r3, #12
 800330c:	6033      	str	r3, [r6, #0]
 800330e:	4630      	mov	r0, r6
 8003310:	f000 f80c 	bl	800332c <__malloc_unlock>
 8003314:	e794      	b.n	8003240 <_malloc_r+0x20>
 8003316:	6005      	str	r5, [r0, #0]
 8003318:	e7d6      	b.n	80032c8 <_malloc_r+0xa8>
 800331a:	bf00      	nop
 800331c:	20000344 	.word	0x20000344

08003320 <__malloc_lock>:
 8003320:	4801      	ldr	r0, [pc, #4]	@ (8003328 <__malloc_lock+0x8>)
 8003322:	f7ff bf0f 	b.w	8003144 <__retarget_lock_acquire_recursive>
 8003326:	bf00      	nop
 8003328:	2000033c 	.word	0x2000033c

0800332c <__malloc_unlock>:
 800332c:	4801      	ldr	r0, [pc, #4]	@ (8003334 <__malloc_unlock+0x8>)
 800332e:	f7ff bf0a 	b.w	8003146 <__retarget_lock_release_recursive>
 8003332:	bf00      	nop
 8003334:	2000033c 	.word	0x2000033c

08003338 <__ssputs_r>:
 8003338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800333c:	688e      	ldr	r6, [r1, #8]
 800333e:	461f      	mov	r7, r3
 8003340:	42be      	cmp	r6, r7
 8003342:	680b      	ldr	r3, [r1, #0]
 8003344:	4682      	mov	sl, r0
 8003346:	460c      	mov	r4, r1
 8003348:	4690      	mov	r8, r2
 800334a:	d82d      	bhi.n	80033a8 <__ssputs_r+0x70>
 800334c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003350:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003354:	d026      	beq.n	80033a4 <__ssputs_r+0x6c>
 8003356:	6965      	ldr	r5, [r4, #20]
 8003358:	6909      	ldr	r1, [r1, #16]
 800335a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800335e:	eba3 0901 	sub.w	r9, r3, r1
 8003362:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003366:	1c7b      	adds	r3, r7, #1
 8003368:	444b      	add	r3, r9
 800336a:	106d      	asrs	r5, r5, #1
 800336c:	429d      	cmp	r5, r3
 800336e:	bf38      	it	cc
 8003370:	461d      	movcc	r5, r3
 8003372:	0553      	lsls	r3, r2, #21
 8003374:	d527      	bpl.n	80033c6 <__ssputs_r+0x8e>
 8003376:	4629      	mov	r1, r5
 8003378:	f7ff ff52 	bl	8003220 <_malloc_r>
 800337c:	4606      	mov	r6, r0
 800337e:	b360      	cbz	r0, 80033da <__ssputs_r+0xa2>
 8003380:	6921      	ldr	r1, [r4, #16]
 8003382:	464a      	mov	r2, r9
 8003384:	f000 fae6 	bl	8003954 <memcpy>
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800338e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003392:	81a3      	strh	r3, [r4, #12]
 8003394:	6126      	str	r6, [r4, #16]
 8003396:	6165      	str	r5, [r4, #20]
 8003398:	444e      	add	r6, r9
 800339a:	eba5 0509 	sub.w	r5, r5, r9
 800339e:	6026      	str	r6, [r4, #0]
 80033a0:	60a5      	str	r5, [r4, #8]
 80033a2:	463e      	mov	r6, r7
 80033a4:	42be      	cmp	r6, r7
 80033a6:	d900      	bls.n	80033aa <__ssputs_r+0x72>
 80033a8:	463e      	mov	r6, r7
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	4632      	mov	r2, r6
 80033ae:	4641      	mov	r1, r8
 80033b0:	f000 faa6 	bl	8003900 <memmove>
 80033b4:	68a3      	ldr	r3, [r4, #8]
 80033b6:	1b9b      	subs	r3, r3, r6
 80033b8:	60a3      	str	r3, [r4, #8]
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	4433      	add	r3, r6
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	2000      	movs	r0, #0
 80033c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c6:	462a      	mov	r2, r5
 80033c8:	f000 fad2 	bl	8003970 <_realloc_r>
 80033cc:	4606      	mov	r6, r0
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d1e0      	bne.n	8003394 <__ssputs_r+0x5c>
 80033d2:	6921      	ldr	r1, [r4, #16]
 80033d4:	4650      	mov	r0, sl
 80033d6:	f7ff feb7 	bl	8003148 <_free_r>
 80033da:	230c      	movs	r3, #12
 80033dc:	f8ca 3000 	str.w	r3, [sl]
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033e6:	81a3      	strh	r3, [r4, #12]
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ec:	e7e9      	b.n	80033c2 <__ssputs_r+0x8a>
	...

080033f0 <_svfiprintf_r>:
 80033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	4698      	mov	r8, r3
 80033f6:	898b      	ldrh	r3, [r1, #12]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	b09d      	sub	sp, #116	@ 0x74
 80033fc:	4607      	mov	r7, r0
 80033fe:	460d      	mov	r5, r1
 8003400:	4614      	mov	r4, r2
 8003402:	d510      	bpl.n	8003426 <_svfiprintf_r+0x36>
 8003404:	690b      	ldr	r3, [r1, #16]
 8003406:	b973      	cbnz	r3, 8003426 <_svfiprintf_r+0x36>
 8003408:	2140      	movs	r1, #64	@ 0x40
 800340a:	f7ff ff09 	bl	8003220 <_malloc_r>
 800340e:	6028      	str	r0, [r5, #0]
 8003410:	6128      	str	r0, [r5, #16]
 8003412:	b930      	cbnz	r0, 8003422 <_svfiprintf_r+0x32>
 8003414:	230c      	movs	r3, #12
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	b01d      	add	sp, #116	@ 0x74
 800341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003422:	2340      	movs	r3, #64	@ 0x40
 8003424:	616b      	str	r3, [r5, #20]
 8003426:	2300      	movs	r3, #0
 8003428:	9309      	str	r3, [sp, #36]	@ 0x24
 800342a:	2320      	movs	r3, #32
 800342c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003430:	f8cd 800c 	str.w	r8, [sp, #12]
 8003434:	2330      	movs	r3, #48	@ 0x30
 8003436:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80035d4 <_svfiprintf_r+0x1e4>
 800343a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800343e:	f04f 0901 	mov.w	r9, #1
 8003442:	4623      	mov	r3, r4
 8003444:	469a      	mov	sl, r3
 8003446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800344a:	b10a      	cbz	r2, 8003450 <_svfiprintf_r+0x60>
 800344c:	2a25      	cmp	r2, #37	@ 0x25
 800344e:	d1f9      	bne.n	8003444 <_svfiprintf_r+0x54>
 8003450:	ebba 0b04 	subs.w	fp, sl, r4
 8003454:	d00b      	beq.n	800346e <_svfiprintf_r+0x7e>
 8003456:	465b      	mov	r3, fp
 8003458:	4622      	mov	r2, r4
 800345a:	4629      	mov	r1, r5
 800345c:	4638      	mov	r0, r7
 800345e:	f7ff ff6b 	bl	8003338 <__ssputs_r>
 8003462:	3001      	adds	r0, #1
 8003464:	f000 80a7 	beq.w	80035b6 <_svfiprintf_r+0x1c6>
 8003468:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800346a:	445a      	add	r2, fp
 800346c:	9209      	str	r2, [sp, #36]	@ 0x24
 800346e:	f89a 3000 	ldrb.w	r3, [sl]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 809f 	beq.w	80035b6 <_svfiprintf_r+0x1c6>
 8003478:	2300      	movs	r3, #0
 800347a:	f04f 32ff 	mov.w	r2, #4294967295
 800347e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003482:	f10a 0a01 	add.w	sl, sl, #1
 8003486:	9304      	str	r3, [sp, #16]
 8003488:	9307      	str	r3, [sp, #28]
 800348a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800348e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003490:	4654      	mov	r4, sl
 8003492:	2205      	movs	r2, #5
 8003494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003498:	484e      	ldr	r0, [pc, #312]	@ (80035d4 <_svfiprintf_r+0x1e4>)
 800349a:	f7fc fea9 	bl	80001f0 <memchr>
 800349e:	9a04      	ldr	r2, [sp, #16]
 80034a0:	b9d8      	cbnz	r0, 80034da <_svfiprintf_r+0xea>
 80034a2:	06d0      	lsls	r0, r2, #27
 80034a4:	bf44      	itt	mi
 80034a6:	2320      	movmi	r3, #32
 80034a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034ac:	0711      	lsls	r1, r2, #28
 80034ae:	bf44      	itt	mi
 80034b0:	232b      	movmi	r3, #43	@ 0x2b
 80034b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034b6:	f89a 3000 	ldrb.w	r3, [sl]
 80034ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80034bc:	d015      	beq.n	80034ea <_svfiprintf_r+0xfa>
 80034be:	9a07      	ldr	r2, [sp, #28]
 80034c0:	4654      	mov	r4, sl
 80034c2:	2000      	movs	r0, #0
 80034c4:	f04f 0c0a 	mov.w	ip, #10
 80034c8:	4621      	mov	r1, r4
 80034ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034ce:	3b30      	subs	r3, #48	@ 0x30
 80034d0:	2b09      	cmp	r3, #9
 80034d2:	d94b      	bls.n	800356c <_svfiprintf_r+0x17c>
 80034d4:	b1b0      	cbz	r0, 8003504 <_svfiprintf_r+0x114>
 80034d6:	9207      	str	r2, [sp, #28]
 80034d8:	e014      	b.n	8003504 <_svfiprintf_r+0x114>
 80034da:	eba0 0308 	sub.w	r3, r0, r8
 80034de:	fa09 f303 	lsl.w	r3, r9, r3
 80034e2:	4313      	orrs	r3, r2
 80034e4:	9304      	str	r3, [sp, #16]
 80034e6:	46a2      	mov	sl, r4
 80034e8:	e7d2      	b.n	8003490 <_svfiprintf_r+0xa0>
 80034ea:	9b03      	ldr	r3, [sp, #12]
 80034ec:	1d19      	adds	r1, r3, #4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	9103      	str	r1, [sp, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bfbb      	ittet	lt
 80034f6:	425b      	neglt	r3, r3
 80034f8:	f042 0202 	orrlt.w	r2, r2, #2
 80034fc:	9307      	strge	r3, [sp, #28]
 80034fe:	9307      	strlt	r3, [sp, #28]
 8003500:	bfb8      	it	lt
 8003502:	9204      	strlt	r2, [sp, #16]
 8003504:	7823      	ldrb	r3, [r4, #0]
 8003506:	2b2e      	cmp	r3, #46	@ 0x2e
 8003508:	d10a      	bne.n	8003520 <_svfiprintf_r+0x130>
 800350a:	7863      	ldrb	r3, [r4, #1]
 800350c:	2b2a      	cmp	r3, #42	@ 0x2a
 800350e:	d132      	bne.n	8003576 <_svfiprintf_r+0x186>
 8003510:	9b03      	ldr	r3, [sp, #12]
 8003512:	1d1a      	adds	r2, r3, #4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	9203      	str	r2, [sp, #12]
 8003518:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800351c:	3402      	adds	r4, #2
 800351e:	9305      	str	r3, [sp, #20]
 8003520:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80035e4 <_svfiprintf_r+0x1f4>
 8003524:	7821      	ldrb	r1, [r4, #0]
 8003526:	2203      	movs	r2, #3
 8003528:	4650      	mov	r0, sl
 800352a:	f7fc fe61 	bl	80001f0 <memchr>
 800352e:	b138      	cbz	r0, 8003540 <_svfiprintf_r+0x150>
 8003530:	9b04      	ldr	r3, [sp, #16]
 8003532:	eba0 000a 	sub.w	r0, r0, sl
 8003536:	2240      	movs	r2, #64	@ 0x40
 8003538:	4082      	lsls	r2, r0
 800353a:	4313      	orrs	r3, r2
 800353c:	3401      	adds	r4, #1
 800353e:	9304      	str	r3, [sp, #16]
 8003540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003544:	4824      	ldr	r0, [pc, #144]	@ (80035d8 <_svfiprintf_r+0x1e8>)
 8003546:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800354a:	2206      	movs	r2, #6
 800354c:	f7fc fe50 	bl	80001f0 <memchr>
 8003550:	2800      	cmp	r0, #0
 8003552:	d036      	beq.n	80035c2 <_svfiprintf_r+0x1d2>
 8003554:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <_svfiprintf_r+0x1ec>)
 8003556:	bb1b      	cbnz	r3, 80035a0 <_svfiprintf_r+0x1b0>
 8003558:	9b03      	ldr	r3, [sp, #12]
 800355a:	3307      	adds	r3, #7
 800355c:	f023 0307 	bic.w	r3, r3, #7
 8003560:	3308      	adds	r3, #8
 8003562:	9303      	str	r3, [sp, #12]
 8003564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003566:	4433      	add	r3, r6
 8003568:	9309      	str	r3, [sp, #36]	@ 0x24
 800356a:	e76a      	b.n	8003442 <_svfiprintf_r+0x52>
 800356c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003570:	460c      	mov	r4, r1
 8003572:	2001      	movs	r0, #1
 8003574:	e7a8      	b.n	80034c8 <_svfiprintf_r+0xd8>
 8003576:	2300      	movs	r3, #0
 8003578:	3401      	adds	r4, #1
 800357a:	9305      	str	r3, [sp, #20]
 800357c:	4619      	mov	r1, r3
 800357e:	f04f 0c0a 	mov.w	ip, #10
 8003582:	4620      	mov	r0, r4
 8003584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003588:	3a30      	subs	r2, #48	@ 0x30
 800358a:	2a09      	cmp	r2, #9
 800358c:	d903      	bls.n	8003596 <_svfiprintf_r+0x1a6>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0c6      	beq.n	8003520 <_svfiprintf_r+0x130>
 8003592:	9105      	str	r1, [sp, #20]
 8003594:	e7c4      	b.n	8003520 <_svfiprintf_r+0x130>
 8003596:	fb0c 2101 	mla	r1, ip, r1, r2
 800359a:	4604      	mov	r4, r0
 800359c:	2301      	movs	r3, #1
 800359e:	e7f0      	b.n	8003582 <_svfiprintf_r+0x192>
 80035a0:	ab03      	add	r3, sp, #12
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	462a      	mov	r2, r5
 80035a6:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <_svfiprintf_r+0x1f0>)
 80035a8:	a904      	add	r1, sp, #16
 80035aa:	4638      	mov	r0, r7
 80035ac:	f3af 8000 	nop.w
 80035b0:	1c42      	adds	r2, r0, #1
 80035b2:	4606      	mov	r6, r0
 80035b4:	d1d6      	bne.n	8003564 <_svfiprintf_r+0x174>
 80035b6:	89ab      	ldrh	r3, [r5, #12]
 80035b8:	065b      	lsls	r3, r3, #25
 80035ba:	f53f af2d 	bmi.w	8003418 <_svfiprintf_r+0x28>
 80035be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80035c0:	e72c      	b.n	800341c <_svfiprintf_r+0x2c>
 80035c2:	ab03      	add	r3, sp, #12
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	462a      	mov	r2, r5
 80035c8:	4b05      	ldr	r3, [pc, #20]	@ (80035e0 <_svfiprintf_r+0x1f0>)
 80035ca:	a904      	add	r1, sp, #16
 80035cc:	4638      	mov	r0, r7
 80035ce:	f000 f879 	bl	80036c4 <_printf_i>
 80035d2:	e7ed      	b.n	80035b0 <_svfiprintf_r+0x1c0>
 80035d4:	08003b04 	.word	0x08003b04
 80035d8:	08003b0e 	.word	0x08003b0e
 80035dc:	00000000 	.word	0x00000000
 80035e0:	08003339 	.word	0x08003339
 80035e4:	08003b0a 	.word	0x08003b0a

080035e8 <_printf_common>:
 80035e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ec:	4616      	mov	r6, r2
 80035ee:	4698      	mov	r8, r3
 80035f0:	688a      	ldr	r2, [r1, #8]
 80035f2:	690b      	ldr	r3, [r1, #16]
 80035f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bfb8      	it	lt
 80035fc:	4613      	movlt	r3, r2
 80035fe:	6033      	str	r3, [r6, #0]
 8003600:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003604:	4607      	mov	r7, r0
 8003606:	460c      	mov	r4, r1
 8003608:	b10a      	cbz	r2, 800360e <_printf_common+0x26>
 800360a:	3301      	adds	r3, #1
 800360c:	6033      	str	r3, [r6, #0]
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	0699      	lsls	r1, r3, #26
 8003612:	bf42      	ittt	mi
 8003614:	6833      	ldrmi	r3, [r6, #0]
 8003616:	3302      	addmi	r3, #2
 8003618:	6033      	strmi	r3, [r6, #0]
 800361a:	6825      	ldr	r5, [r4, #0]
 800361c:	f015 0506 	ands.w	r5, r5, #6
 8003620:	d106      	bne.n	8003630 <_printf_common+0x48>
 8003622:	f104 0a19 	add.w	sl, r4, #25
 8003626:	68e3      	ldr	r3, [r4, #12]
 8003628:	6832      	ldr	r2, [r6, #0]
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	42ab      	cmp	r3, r5
 800362e:	dc26      	bgt.n	800367e <_printf_common+0x96>
 8003630:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003634:	6822      	ldr	r2, [r4, #0]
 8003636:	3b00      	subs	r3, #0
 8003638:	bf18      	it	ne
 800363a:	2301      	movne	r3, #1
 800363c:	0692      	lsls	r2, r2, #26
 800363e:	d42b      	bmi.n	8003698 <_printf_common+0xb0>
 8003640:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003644:	4641      	mov	r1, r8
 8003646:	4638      	mov	r0, r7
 8003648:	47c8      	blx	r9
 800364a:	3001      	adds	r0, #1
 800364c:	d01e      	beq.n	800368c <_printf_common+0xa4>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	6922      	ldr	r2, [r4, #16]
 8003652:	f003 0306 	and.w	r3, r3, #6
 8003656:	2b04      	cmp	r3, #4
 8003658:	bf02      	ittt	eq
 800365a:	68e5      	ldreq	r5, [r4, #12]
 800365c:	6833      	ldreq	r3, [r6, #0]
 800365e:	1aed      	subeq	r5, r5, r3
 8003660:	68a3      	ldr	r3, [r4, #8]
 8003662:	bf0c      	ite	eq
 8003664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003668:	2500      	movne	r5, #0
 800366a:	4293      	cmp	r3, r2
 800366c:	bfc4      	itt	gt
 800366e:	1a9b      	subgt	r3, r3, r2
 8003670:	18ed      	addgt	r5, r5, r3
 8003672:	2600      	movs	r6, #0
 8003674:	341a      	adds	r4, #26
 8003676:	42b5      	cmp	r5, r6
 8003678:	d11a      	bne.n	80036b0 <_printf_common+0xc8>
 800367a:	2000      	movs	r0, #0
 800367c:	e008      	b.n	8003690 <_printf_common+0xa8>
 800367e:	2301      	movs	r3, #1
 8003680:	4652      	mov	r2, sl
 8003682:	4641      	mov	r1, r8
 8003684:	4638      	mov	r0, r7
 8003686:	47c8      	blx	r9
 8003688:	3001      	adds	r0, #1
 800368a:	d103      	bne.n	8003694 <_printf_common+0xac>
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003694:	3501      	adds	r5, #1
 8003696:	e7c6      	b.n	8003626 <_printf_common+0x3e>
 8003698:	18e1      	adds	r1, r4, r3
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	2030      	movs	r0, #48	@ 0x30
 800369e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80036a2:	4422      	add	r2, r4
 80036a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80036a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80036ac:	3302      	adds	r3, #2
 80036ae:	e7c7      	b.n	8003640 <_printf_common+0x58>
 80036b0:	2301      	movs	r3, #1
 80036b2:	4622      	mov	r2, r4
 80036b4:	4641      	mov	r1, r8
 80036b6:	4638      	mov	r0, r7
 80036b8:	47c8      	blx	r9
 80036ba:	3001      	adds	r0, #1
 80036bc:	d0e6      	beq.n	800368c <_printf_common+0xa4>
 80036be:	3601      	adds	r6, #1
 80036c0:	e7d9      	b.n	8003676 <_printf_common+0x8e>
	...

080036c4 <_printf_i>:
 80036c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036c8:	7e0f      	ldrb	r7, [r1, #24]
 80036ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80036cc:	2f78      	cmp	r7, #120	@ 0x78
 80036ce:	4691      	mov	r9, r2
 80036d0:	4680      	mov	r8, r0
 80036d2:	460c      	mov	r4, r1
 80036d4:	469a      	mov	sl, r3
 80036d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80036da:	d807      	bhi.n	80036ec <_printf_i+0x28>
 80036dc:	2f62      	cmp	r7, #98	@ 0x62
 80036de:	d80a      	bhi.n	80036f6 <_printf_i+0x32>
 80036e0:	2f00      	cmp	r7, #0
 80036e2:	f000 80d1 	beq.w	8003888 <_printf_i+0x1c4>
 80036e6:	2f58      	cmp	r7, #88	@ 0x58
 80036e8:	f000 80b8 	beq.w	800385c <_printf_i+0x198>
 80036ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80036f4:	e03a      	b.n	800376c <_printf_i+0xa8>
 80036f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80036fa:	2b15      	cmp	r3, #21
 80036fc:	d8f6      	bhi.n	80036ec <_printf_i+0x28>
 80036fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003704 <_printf_i+0x40>)
 8003700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003704:	0800375d 	.word	0x0800375d
 8003708:	08003771 	.word	0x08003771
 800370c:	080036ed 	.word	0x080036ed
 8003710:	080036ed 	.word	0x080036ed
 8003714:	080036ed 	.word	0x080036ed
 8003718:	080036ed 	.word	0x080036ed
 800371c:	08003771 	.word	0x08003771
 8003720:	080036ed 	.word	0x080036ed
 8003724:	080036ed 	.word	0x080036ed
 8003728:	080036ed 	.word	0x080036ed
 800372c:	080036ed 	.word	0x080036ed
 8003730:	0800386f 	.word	0x0800386f
 8003734:	0800379b 	.word	0x0800379b
 8003738:	08003829 	.word	0x08003829
 800373c:	080036ed 	.word	0x080036ed
 8003740:	080036ed 	.word	0x080036ed
 8003744:	08003891 	.word	0x08003891
 8003748:	080036ed 	.word	0x080036ed
 800374c:	0800379b 	.word	0x0800379b
 8003750:	080036ed 	.word	0x080036ed
 8003754:	080036ed 	.word	0x080036ed
 8003758:	08003831 	.word	0x08003831
 800375c:	6833      	ldr	r3, [r6, #0]
 800375e:	1d1a      	adds	r2, r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6032      	str	r2, [r6, #0]
 8003764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003768:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800376c:	2301      	movs	r3, #1
 800376e:	e09c      	b.n	80038aa <_printf_i+0x1e6>
 8003770:	6833      	ldr	r3, [r6, #0]
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	1d19      	adds	r1, r3, #4
 8003776:	6031      	str	r1, [r6, #0]
 8003778:	0606      	lsls	r6, r0, #24
 800377a:	d501      	bpl.n	8003780 <_printf_i+0xbc>
 800377c:	681d      	ldr	r5, [r3, #0]
 800377e:	e003      	b.n	8003788 <_printf_i+0xc4>
 8003780:	0645      	lsls	r5, r0, #25
 8003782:	d5fb      	bpl.n	800377c <_printf_i+0xb8>
 8003784:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003788:	2d00      	cmp	r5, #0
 800378a:	da03      	bge.n	8003794 <_printf_i+0xd0>
 800378c:	232d      	movs	r3, #45	@ 0x2d
 800378e:	426d      	negs	r5, r5
 8003790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003794:	4858      	ldr	r0, [pc, #352]	@ (80038f8 <_printf_i+0x234>)
 8003796:	230a      	movs	r3, #10
 8003798:	e011      	b.n	80037be <_printf_i+0xfa>
 800379a:	6821      	ldr	r1, [r4, #0]
 800379c:	6833      	ldr	r3, [r6, #0]
 800379e:	0608      	lsls	r0, r1, #24
 80037a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80037a4:	d402      	bmi.n	80037ac <_printf_i+0xe8>
 80037a6:	0649      	lsls	r1, r1, #25
 80037a8:	bf48      	it	mi
 80037aa:	b2ad      	uxthmi	r5, r5
 80037ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80037ae:	4852      	ldr	r0, [pc, #328]	@ (80038f8 <_printf_i+0x234>)
 80037b0:	6033      	str	r3, [r6, #0]
 80037b2:	bf14      	ite	ne
 80037b4:	230a      	movne	r3, #10
 80037b6:	2308      	moveq	r3, #8
 80037b8:	2100      	movs	r1, #0
 80037ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80037be:	6866      	ldr	r6, [r4, #4]
 80037c0:	60a6      	str	r6, [r4, #8]
 80037c2:	2e00      	cmp	r6, #0
 80037c4:	db05      	blt.n	80037d2 <_printf_i+0x10e>
 80037c6:	6821      	ldr	r1, [r4, #0]
 80037c8:	432e      	orrs	r6, r5
 80037ca:	f021 0104 	bic.w	r1, r1, #4
 80037ce:	6021      	str	r1, [r4, #0]
 80037d0:	d04b      	beq.n	800386a <_printf_i+0x1a6>
 80037d2:	4616      	mov	r6, r2
 80037d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80037d8:	fb03 5711 	mls	r7, r3, r1, r5
 80037dc:	5dc7      	ldrb	r7, [r0, r7]
 80037de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037e2:	462f      	mov	r7, r5
 80037e4:	42bb      	cmp	r3, r7
 80037e6:	460d      	mov	r5, r1
 80037e8:	d9f4      	bls.n	80037d4 <_printf_i+0x110>
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d10b      	bne.n	8003806 <_printf_i+0x142>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	07df      	lsls	r7, r3, #31
 80037f2:	d508      	bpl.n	8003806 <_printf_i+0x142>
 80037f4:	6923      	ldr	r3, [r4, #16]
 80037f6:	6861      	ldr	r1, [r4, #4]
 80037f8:	4299      	cmp	r1, r3
 80037fa:	bfde      	ittt	le
 80037fc:	2330      	movle	r3, #48	@ 0x30
 80037fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003802:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003806:	1b92      	subs	r2, r2, r6
 8003808:	6122      	str	r2, [r4, #16]
 800380a:	f8cd a000 	str.w	sl, [sp]
 800380e:	464b      	mov	r3, r9
 8003810:	aa03      	add	r2, sp, #12
 8003812:	4621      	mov	r1, r4
 8003814:	4640      	mov	r0, r8
 8003816:	f7ff fee7 	bl	80035e8 <_printf_common>
 800381a:	3001      	adds	r0, #1
 800381c:	d14a      	bne.n	80038b4 <_printf_i+0x1f0>
 800381e:	f04f 30ff 	mov.w	r0, #4294967295
 8003822:	b004      	add	sp, #16
 8003824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	f043 0320 	orr.w	r3, r3, #32
 800382e:	6023      	str	r3, [r4, #0]
 8003830:	4832      	ldr	r0, [pc, #200]	@ (80038fc <_printf_i+0x238>)
 8003832:	2778      	movs	r7, #120	@ 0x78
 8003834:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	6831      	ldr	r1, [r6, #0]
 800383c:	061f      	lsls	r7, r3, #24
 800383e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003842:	d402      	bmi.n	800384a <_printf_i+0x186>
 8003844:	065f      	lsls	r7, r3, #25
 8003846:	bf48      	it	mi
 8003848:	b2ad      	uxthmi	r5, r5
 800384a:	6031      	str	r1, [r6, #0]
 800384c:	07d9      	lsls	r1, r3, #31
 800384e:	bf44      	itt	mi
 8003850:	f043 0320 	orrmi.w	r3, r3, #32
 8003854:	6023      	strmi	r3, [r4, #0]
 8003856:	b11d      	cbz	r5, 8003860 <_printf_i+0x19c>
 8003858:	2310      	movs	r3, #16
 800385a:	e7ad      	b.n	80037b8 <_printf_i+0xf4>
 800385c:	4826      	ldr	r0, [pc, #152]	@ (80038f8 <_printf_i+0x234>)
 800385e:	e7e9      	b.n	8003834 <_printf_i+0x170>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	f023 0320 	bic.w	r3, r3, #32
 8003866:	6023      	str	r3, [r4, #0]
 8003868:	e7f6      	b.n	8003858 <_printf_i+0x194>
 800386a:	4616      	mov	r6, r2
 800386c:	e7bd      	b.n	80037ea <_printf_i+0x126>
 800386e:	6833      	ldr	r3, [r6, #0]
 8003870:	6825      	ldr	r5, [r4, #0]
 8003872:	6961      	ldr	r1, [r4, #20]
 8003874:	1d18      	adds	r0, r3, #4
 8003876:	6030      	str	r0, [r6, #0]
 8003878:	062e      	lsls	r6, r5, #24
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	d501      	bpl.n	8003882 <_printf_i+0x1be>
 800387e:	6019      	str	r1, [r3, #0]
 8003880:	e002      	b.n	8003888 <_printf_i+0x1c4>
 8003882:	0668      	lsls	r0, r5, #25
 8003884:	d5fb      	bpl.n	800387e <_printf_i+0x1ba>
 8003886:	8019      	strh	r1, [r3, #0]
 8003888:	2300      	movs	r3, #0
 800388a:	6123      	str	r3, [r4, #16]
 800388c:	4616      	mov	r6, r2
 800388e:	e7bc      	b.n	800380a <_printf_i+0x146>
 8003890:	6833      	ldr	r3, [r6, #0]
 8003892:	1d1a      	adds	r2, r3, #4
 8003894:	6032      	str	r2, [r6, #0]
 8003896:	681e      	ldr	r6, [r3, #0]
 8003898:	6862      	ldr	r2, [r4, #4]
 800389a:	2100      	movs	r1, #0
 800389c:	4630      	mov	r0, r6
 800389e:	f7fc fca7 	bl	80001f0 <memchr>
 80038a2:	b108      	cbz	r0, 80038a8 <_printf_i+0x1e4>
 80038a4:	1b80      	subs	r0, r0, r6
 80038a6:	6060      	str	r0, [r4, #4]
 80038a8:	6863      	ldr	r3, [r4, #4]
 80038aa:	6123      	str	r3, [r4, #16]
 80038ac:	2300      	movs	r3, #0
 80038ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038b2:	e7aa      	b.n	800380a <_printf_i+0x146>
 80038b4:	6923      	ldr	r3, [r4, #16]
 80038b6:	4632      	mov	r2, r6
 80038b8:	4649      	mov	r1, r9
 80038ba:	4640      	mov	r0, r8
 80038bc:	47d0      	blx	sl
 80038be:	3001      	adds	r0, #1
 80038c0:	d0ad      	beq.n	800381e <_printf_i+0x15a>
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	079b      	lsls	r3, r3, #30
 80038c6:	d413      	bmi.n	80038f0 <_printf_i+0x22c>
 80038c8:	68e0      	ldr	r0, [r4, #12]
 80038ca:	9b03      	ldr	r3, [sp, #12]
 80038cc:	4298      	cmp	r0, r3
 80038ce:	bfb8      	it	lt
 80038d0:	4618      	movlt	r0, r3
 80038d2:	e7a6      	b.n	8003822 <_printf_i+0x15e>
 80038d4:	2301      	movs	r3, #1
 80038d6:	4632      	mov	r2, r6
 80038d8:	4649      	mov	r1, r9
 80038da:	4640      	mov	r0, r8
 80038dc:	47d0      	blx	sl
 80038de:	3001      	adds	r0, #1
 80038e0:	d09d      	beq.n	800381e <_printf_i+0x15a>
 80038e2:	3501      	adds	r5, #1
 80038e4:	68e3      	ldr	r3, [r4, #12]
 80038e6:	9903      	ldr	r1, [sp, #12]
 80038e8:	1a5b      	subs	r3, r3, r1
 80038ea:	42ab      	cmp	r3, r5
 80038ec:	dcf2      	bgt.n	80038d4 <_printf_i+0x210>
 80038ee:	e7eb      	b.n	80038c8 <_printf_i+0x204>
 80038f0:	2500      	movs	r5, #0
 80038f2:	f104 0619 	add.w	r6, r4, #25
 80038f6:	e7f5      	b.n	80038e4 <_printf_i+0x220>
 80038f8:	08003b15 	.word	0x08003b15
 80038fc:	08003b26 	.word	0x08003b26

08003900 <memmove>:
 8003900:	4288      	cmp	r0, r1
 8003902:	b510      	push	{r4, lr}
 8003904:	eb01 0402 	add.w	r4, r1, r2
 8003908:	d902      	bls.n	8003910 <memmove+0x10>
 800390a:	4284      	cmp	r4, r0
 800390c:	4623      	mov	r3, r4
 800390e:	d807      	bhi.n	8003920 <memmove+0x20>
 8003910:	1e43      	subs	r3, r0, #1
 8003912:	42a1      	cmp	r1, r4
 8003914:	d008      	beq.n	8003928 <memmove+0x28>
 8003916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800391a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800391e:	e7f8      	b.n	8003912 <memmove+0x12>
 8003920:	4402      	add	r2, r0
 8003922:	4601      	mov	r1, r0
 8003924:	428a      	cmp	r2, r1
 8003926:	d100      	bne.n	800392a <memmove+0x2a>
 8003928:	bd10      	pop	{r4, pc}
 800392a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800392e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003932:	e7f7      	b.n	8003924 <memmove+0x24>

08003934 <_sbrk_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4d06      	ldr	r5, [pc, #24]	@ (8003950 <_sbrk_r+0x1c>)
 8003938:	2300      	movs	r3, #0
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	f7fd f868 	bl	8000a14 <_sbrk>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_sbrk_r+0x1a>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_sbrk_r+0x1a>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	20000338 	.word	0x20000338

08003954 <memcpy>:
 8003954:	440a      	add	r2, r1
 8003956:	4291      	cmp	r1, r2
 8003958:	f100 33ff 	add.w	r3, r0, #4294967295
 800395c:	d100      	bne.n	8003960 <memcpy+0xc>
 800395e:	4770      	bx	lr
 8003960:	b510      	push	{r4, lr}
 8003962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800396a:	4291      	cmp	r1, r2
 800396c:	d1f9      	bne.n	8003962 <memcpy+0xe>
 800396e:	bd10      	pop	{r4, pc}

08003970 <_realloc_r>:
 8003970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003974:	4607      	mov	r7, r0
 8003976:	4614      	mov	r4, r2
 8003978:	460d      	mov	r5, r1
 800397a:	b921      	cbnz	r1, 8003986 <_realloc_r+0x16>
 800397c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003980:	4611      	mov	r1, r2
 8003982:	f7ff bc4d 	b.w	8003220 <_malloc_r>
 8003986:	b92a      	cbnz	r2, 8003994 <_realloc_r+0x24>
 8003988:	f7ff fbde 	bl	8003148 <_free_r>
 800398c:	4625      	mov	r5, r4
 800398e:	4628      	mov	r0, r5
 8003990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003994:	f000 f81a 	bl	80039cc <_malloc_usable_size_r>
 8003998:	4284      	cmp	r4, r0
 800399a:	4606      	mov	r6, r0
 800399c:	d802      	bhi.n	80039a4 <_realloc_r+0x34>
 800399e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039a2:	d8f4      	bhi.n	800398e <_realloc_r+0x1e>
 80039a4:	4621      	mov	r1, r4
 80039a6:	4638      	mov	r0, r7
 80039a8:	f7ff fc3a 	bl	8003220 <_malloc_r>
 80039ac:	4680      	mov	r8, r0
 80039ae:	b908      	cbnz	r0, 80039b4 <_realloc_r+0x44>
 80039b0:	4645      	mov	r5, r8
 80039b2:	e7ec      	b.n	800398e <_realloc_r+0x1e>
 80039b4:	42b4      	cmp	r4, r6
 80039b6:	4622      	mov	r2, r4
 80039b8:	4629      	mov	r1, r5
 80039ba:	bf28      	it	cs
 80039bc:	4632      	movcs	r2, r6
 80039be:	f7ff ffc9 	bl	8003954 <memcpy>
 80039c2:	4629      	mov	r1, r5
 80039c4:	4638      	mov	r0, r7
 80039c6:	f7ff fbbf 	bl	8003148 <_free_r>
 80039ca:	e7f1      	b.n	80039b0 <_realloc_r+0x40>

080039cc <_malloc_usable_size_r>:
 80039cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d0:	1f18      	subs	r0, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bfbc      	itt	lt
 80039d6:	580b      	ldrlt	r3, [r1, r0]
 80039d8:	18c0      	addlt	r0, r0, r3
 80039da:	4770      	bx	lr

080039dc <_init>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	bf00      	nop
 80039e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e2:	bc08      	pop	{r3}
 80039e4:	469e      	mov	lr, r3
 80039e6:	4770      	bx	lr

080039e8 <_fini>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	bf00      	nop
 80039ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ee:	bc08      	pop	{r3}
 80039f0:	469e      	mov	lr, r3
 80039f2:	4770      	bx	lr
